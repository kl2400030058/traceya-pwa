// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Farmer {
  id        String   @id @default(cuid())
  phone     String   @unique
  name      String?
  village   String?
  district  String?
  state     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  events      CollectionEvent[]
  otpRequests OtpRequest[]

  @@map("farmers")
}

model CollectionEvent {
  id          String      @id @default(cuid())
  farmerId    String
  species     String
  latitude    Float
  longitude   Float
  accuracy    Float?
  altitude    Float?
  timestamp   DateTime
  moisturePct Float?
  notes       String?
  photoHash   String?
  photoUrl    String?
  status      EventStatus @default(PENDING)
  txId        String? // Blockchain transaction ID
  blockHash   String? // Blockchain block hash
  lastError   String?
  retryCount  Int         @default(0)
  maxRetries  Int         @default(3)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  syncedAt    DateTime? // When successfully synced to blockchain

  // Validation fields
  isValidLocation Boolean @default(false)
  isValidSeason   Boolean @default(false)
  qualityScore    Float?

  // Source tracking
  source     EventSource @default(PWA)
  deviceInfo String? // Device/browser info
  appVersion String?

  // Relations
  farmer Farmer @relation(fields: [farmerId], references: [id], onDelete: Cascade)

  @@index([farmerId])
  @@index([status])
  @@index([timestamp])
  @@index([species])
  @@index([createdAt])
  @@map("collection_events")
}

model OtpRequest {
  id        String    @id @default(cuid())
  farmerId  String?
  phone     String
  otp       String
  isUsed    Boolean   @default(false)
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  ipAddress String?
  userAgent String?

  // Relations
  farmer Farmer? @relation(fields: [farmerId], references: [id], onDelete: SetNull)

  @@index([phone])
  @@index([expiresAt])
  @@map("otp_requests")
}

model SyncJob {
  id          String    @id @default(cuid())
  eventId     String    @unique
  status      JobStatus @default(PENDING)
  attempts    Int       @default(0)
  maxAttempts Int       @default(3)
  lastError   String?
  scheduledAt DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([status])
  @@index([scheduledAt])
  @@map("sync_jobs")
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String // CREATE, UPDATE, DELETE, SYNC, etc.
  entityType String // FARMER, EVENT, etc.
  entityId   String
  farmerId   String?
  changes    Json? // JSON object with before/after values
  metadata   Json? // Additional context
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([entityType, entityId])
  @@index([farmerId])
  @@index([createdAt])
  @@map("audit_logs")
}

// Enums
enum EventStatus {
  PENDING // Waiting to be processed
  UPLOADING // Currently being synced to blockchain
  SYNCED // Successfully synced to blockchain
  FAILED // Failed to sync after max retries
  CANCELLED // Manually cancelled
}

enum EventSource {
  PWA // From Progressive Web App
  SMS // From SMS gateway
  API // Direct API call
  ADMIN // Admin interface
}

enum JobStatus {
  PENDING // Waiting to be processed
  ACTIVE // Currently being processed
  COMPLETED // Successfully completed
  FAILED // Failed after max attempts
  DELAYED // Delayed for retry
  CANCELLED // Manually cancelled
}
