
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Farmer
 * 
 */
export type Farmer = $Result.DefaultSelection<Prisma.$FarmerPayload>
/**
 * Model CollectionEvent
 * 
 */
export type CollectionEvent = $Result.DefaultSelection<Prisma.$CollectionEventPayload>
/**
 * Model OtpRequest
 * 
 */
export type OtpRequest = $Result.DefaultSelection<Prisma.$OtpRequestPayload>
/**
 * Model SyncJob
 * 
 */
export type SyncJob = $Result.DefaultSelection<Prisma.$SyncJobPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const EventStatus: {
  PENDING: 'PENDING',
  UPLOADING: 'UPLOADING',
  SYNCED: 'SYNCED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

export type EventStatus = (typeof EventStatus)[keyof typeof EventStatus]


export const EventSource: {
  PWA: 'PWA',
  SMS: 'SMS',
  API: 'API',
  ADMIN: 'ADMIN'
};

export type EventSource = (typeof EventSource)[keyof typeof EventSource]


export const JobStatus: {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  DELAYED: 'DELAYED',
  CANCELLED: 'CANCELLED'
};

export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus]

}

export type EventStatus = $Enums.EventStatus

export const EventStatus: typeof $Enums.EventStatus

export type EventSource = $Enums.EventSource

export const EventSource: typeof $Enums.EventSource

export type JobStatus = $Enums.JobStatus

export const JobStatus: typeof $Enums.JobStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Farmers
 * const farmers = await prisma.farmer.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Farmers
   * const farmers = await prisma.farmer.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.farmer`: Exposes CRUD operations for the **Farmer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Farmers
    * const farmers = await prisma.farmer.findMany()
    * ```
    */
  get farmer(): Prisma.FarmerDelegate<ExtArgs>;

  /**
   * `prisma.collectionEvent`: Exposes CRUD operations for the **CollectionEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CollectionEvents
    * const collectionEvents = await prisma.collectionEvent.findMany()
    * ```
    */
  get collectionEvent(): Prisma.CollectionEventDelegate<ExtArgs>;

  /**
   * `prisma.otpRequest`: Exposes CRUD operations for the **OtpRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OtpRequests
    * const otpRequests = await prisma.otpRequest.findMany()
    * ```
    */
  get otpRequest(): Prisma.OtpRequestDelegate<ExtArgs>;

  /**
   * `prisma.syncJob`: Exposes CRUD operations for the **SyncJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SyncJobs
    * const syncJobs = await prisma.syncJob.findMany()
    * ```
    */
  get syncJob(): Prisma.SyncJobDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Farmer: 'Farmer',
    CollectionEvent: 'CollectionEvent',
    OtpRequest: 'OtpRequest',
    SyncJob: 'SyncJob',
    AuditLog: 'AuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "farmer" | "collectionEvent" | "otpRequest" | "syncJob" | "auditLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Farmer: {
        payload: Prisma.$FarmerPayload<ExtArgs>
        fields: Prisma.FarmerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FarmerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FarmerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>
          }
          findFirst: {
            args: Prisma.FarmerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FarmerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>
          }
          findMany: {
            args: Prisma.FarmerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>[]
          }
          create: {
            args: Prisma.FarmerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>
          }
          createMany: {
            args: Prisma.FarmerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FarmerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>[]
          }
          delete: {
            args: Prisma.FarmerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>
          }
          update: {
            args: Prisma.FarmerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>
          }
          deleteMany: {
            args: Prisma.FarmerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FarmerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FarmerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FarmerPayload>
          }
          aggregate: {
            args: Prisma.FarmerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFarmer>
          }
          groupBy: {
            args: Prisma.FarmerGroupByArgs<ExtArgs>
            result: $Utils.Optional<FarmerGroupByOutputType>[]
          }
          count: {
            args: Prisma.FarmerCountArgs<ExtArgs>
            result: $Utils.Optional<FarmerCountAggregateOutputType> | number
          }
        }
      }
      CollectionEvent: {
        payload: Prisma.$CollectionEventPayload<ExtArgs>
        fields: Prisma.CollectionEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollectionEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollectionEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionEventPayload>
          }
          findFirst: {
            args: Prisma.CollectionEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollectionEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionEventPayload>
          }
          findMany: {
            args: Prisma.CollectionEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionEventPayload>[]
          }
          create: {
            args: Prisma.CollectionEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionEventPayload>
          }
          createMany: {
            args: Prisma.CollectionEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CollectionEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionEventPayload>[]
          }
          delete: {
            args: Prisma.CollectionEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionEventPayload>
          }
          update: {
            args: Prisma.CollectionEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionEventPayload>
          }
          deleteMany: {
            args: Prisma.CollectionEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CollectionEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CollectionEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionEventPayload>
          }
          aggregate: {
            args: Prisma.CollectionEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCollectionEvent>
          }
          groupBy: {
            args: Prisma.CollectionEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<CollectionEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollectionEventCountArgs<ExtArgs>
            result: $Utils.Optional<CollectionEventCountAggregateOutputType> | number
          }
        }
      }
      OtpRequest: {
        payload: Prisma.$OtpRequestPayload<ExtArgs>
        fields: Prisma.OtpRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OtpRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OtpRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpRequestPayload>
          }
          findFirst: {
            args: Prisma.OtpRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OtpRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpRequestPayload>
          }
          findMany: {
            args: Prisma.OtpRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpRequestPayload>[]
          }
          create: {
            args: Prisma.OtpRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpRequestPayload>
          }
          createMany: {
            args: Prisma.OtpRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OtpRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpRequestPayload>[]
          }
          delete: {
            args: Prisma.OtpRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpRequestPayload>
          }
          update: {
            args: Prisma.OtpRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpRequestPayload>
          }
          deleteMany: {
            args: Prisma.OtpRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OtpRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OtpRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpRequestPayload>
          }
          aggregate: {
            args: Prisma.OtpRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOtpRequest>
          }
          groupBy: {
            args: Prisma.OtpRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<OtpRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.OtpRequestCountArgs<ExtArgs>
            result: $Utils.Optional<OtpRequestCountAggregateOutputType> | number
          }
        }
      }
      SyncJob: {
        payload: Prisma.$SyncJobPayload<ExtArgs>
        fields: Prisma.SyncJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SyncJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SyncJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          findFirst: {
            args: Prisma.SyncJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SyncJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          findMany: {
            args: Prisma.SyncJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>[]
          }
          create: {
            args: Prisma.SyncJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          createMany: {
            args: Prisma.SyncJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SyncJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>[]
          }
          delete: {
            args: Prisma.SyncJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          update: {
            args: Prisma.SyncJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          deleteMany: {
            args: Prisma.SyncJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SyncJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SyncJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          aggregate: {
            args: Prisma.SyncJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSyncJob>
          }
          groupBy: {
            args: Prisma.SyncJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<SyncJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.SyncJobCountArgs<ExtArgs>
            result: $Utils.Optional<SyncJobCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FarmerCountOutputType
   */

  export type FarmerCountOutputType = {
    events: number
    otpRequests: number
  }

  export type FarmerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | FarmerCountOutputTypeCountEventsArgs
    otpRequests?: boolean | FarmerCountOutputTypeCountOtpRequestsArgs
  }

  // Custom InputTypes
  /**
   * FarmerCountOutputType without action
   */
  export type FarmerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FarmerCountOutputType
     */
    select?: FarmerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FarmerCountOutputType without action
   */
  export type FarmerCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionEventWhereInput
  }

  /**
   * FarmerCountOutputType without action
   */
  export type FarmerCountOutputTypeCountOtpRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtpRequestWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Farmer
   */

  export type AggregateFarmer = {
    _count: FarmerCountAggregateOutputType | null
    _min: FarmerMinAggregateOutputType | null
    _max: FarmerMaxAggregateOutputType | null
  }

  export type FarmerMinAggregateOutputType = {
    id: string | null
    phone: string | null
    name: string | null
    village: string | null
    district: string | null
    state: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FarmerMaxAggregateOutputType = {
    id: string | null
    phone: string | null
    name: string | null
    village: string | null
    district: string | null
    state: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FarmerCountAggregateOutputType = {
    id: number
    phone: number
    name: number
    village: number
    district: number
    state: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FarmerMinAggregateInputType = {
    id?: true
    phone?: true
    name?: true
    village?: true
    district?: true
    state?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FarmerMaxAggregateInputType = {
    id?: true
    phone?: true
    name?: true
    village?: true
    district?: true
    state?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FarmerCountAggregateInputType = {
    id?: true
    phone?: true
    name?: true
    village?: true
    district?: true
    state?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FarmerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Farmer to aggregate.
     */
    where?: FarmerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Farmers to fetch.
     */
    orderBy?: FarmerOrderByWithRelationInput | FarmerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FarmerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Farmers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Farmers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Farmers
    **/
    _count?: true | FarmerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FarmerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FarmerMaxAggregateInputType
  }

  export type GetFarmerAggregateType<T extends FarmerAggregateArgs> = {
        [P in keyof T & keyof AggregateFarmer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFarmer[P]>
      : GetScalarType<T[P], AggregateFarmer[P]>
  }




  export type FarmerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FarmerWhereInput
    orderBy?: FarmerOrderByWithAggregationInput | FarmerOrderByWithAggregationInput[]
    by: FarmerScalarFieldEnum[] | FarmerScalarFieldEnum
    having?: FarmerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FarmerCountAggregateInputType | true
    _min?: FarmerMinAggregateInputType
    _max?: FarmerMaxAggregateInputType
  }

  export type FarmerGroupByOutputType = {
    id: string
    phone: string
    name: string | null
    village: string | null
    district: string | null
    state: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: FarmerCountAggregateOutputType | null
    _min: FarmerMinAggregateOutputType | null
    _max: FarmerMaxAggregateOutputType | null
  }

  type GetFarmerGroupByPayload<T extends FarmerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FarmerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FarmerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FarmerGroupByOutputType[P]>
            : GetScalarType<T[P], FarmerGroupByOutputType[P]>
        }
      >
    >


  export type FarmerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phone?: boolean
    name?: boolean
    village?: boolean
    district?: boolean
    state?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    events?: boolean | Farmer$eventsArgs<ExtArgs>
    otpRequests?: boolean | Farmer$otpRequestsArgs<ExtArgs>
    _count?: boolean | FarmerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["farmer"]>

  export type FarmerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phone?: boolean
    name?: boolean
    village?: boolean
    district?: boolean
    state?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["farmer"]>

  export type FarmerSelectScalar = {
    id?: boolean
    phone?: boolean
    name?: boolean
    village?: boolean
    district?: boolean
    state?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FarmerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | Farmer$eventsArgs<ExtArgs>
    otpRequests?: boolean | Farmer$otpRequestsArgs<ExtArgs>
    _count?: boolean | FarmerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FarmerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FarmerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Farmer"
    objects: {
      events: Prisma.$CollectionEventPayload<ExtArgs>[]
      otpRequests: Prisma.$OtpRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      phone: string
      name: string | null
      village: string | null
      district: string | null
      state: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["farmer"]>
    composites: {}
  }

  type FarmerGetPayload<S extends boolean | null | undefined | FarmerDefaultArgs> = $Result.GetResult<Prisma.$FarmerPayload, S>

  type FarmerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FarmerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FarmerCountAggregateInputType | true
    }

  export interface FarmerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Farmer'], meta: { name: 'Farmer' } }
    /**
     * Find zero or one Farmer that matches the filter.
     * @param {FarmerFindUniqueArgs} args - Arguments to find a Farmer
     * @example
     * // Get one Farmer
     * const farmer = await prisma.farmer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FarmerFindUniqueArgs>(args: SelectSubset<T, FarmerFindUniqueArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Farmer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FarmerFindUniqueOrThrowArgs} args - Arguments to find a Farmer
     * @example
     * // Get one Farmer
     * const farmer = await prisma.farmer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FarmerFindUniqueOrThrowArgs>(args: SelectSubset<T, FarmerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Farmer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FarmerFindFirstArgs} args - Arguments to find a Farmer
     * @example
     * // Get one Farmer
     * const farmer = await prisma.farmer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FarmerFindFirstArgs>(args?: SelectSubset<T, FarmerFindFirstArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Farmer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FarmerFindFirstOrThrowArgs} args - Arguments to find a Farmer
     * @example
     * // Get one Farmer
     * const farmer = await prisma.farmer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FarmerFindFirstOrThrowArgs>(args?: SelectSubset<T, FarmerFindFirstOrThrowArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Farmers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FarmerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Farmers
     * const farmers = await prisma.farmer.findMany()
     * 
     * // Get first 10 Farmers
     * const farmers = await prisma.farmer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const farmerWithIdOnly = await prisma.farmer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FarmerFindManyArgs>(args?: SelectSubset<T, FarmerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Farmer.
     * @param {FarmerCreateArgs} args - Arguments to create a Farmer.
     * @example
     * // Create one Farmer
     * const Farmer = await prisma.farmer.create({
     *   data: {
     *     // ... data to create a Farmer
     *   }
     * })
     * 
     */
    create<T extends FarmerCreateArgs>(args: SelectSubset<T, FarmerCreateArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Farmers.
     * @param {FarmerCreateManyArgs} args - Arguments to create many Farmers.
     * @example
     * // Create many Farmers
     * const farmer = await prisma.farmer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FarmerCreateManyArgs>(args?: SelectSubset<T, FarmerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Farmers and returns the data saved in the database.
     * @param {FarmerCreateManyAndReturnArgs} args - Arguments to create many Farmers.
     * @example
     * // Create many Farmers
     * const farmer = await prisma.farmer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Farmers and only return the `id`
     * const farmerWithIdOnly = await prisma.farmer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FarmerCreateManyAndReturnArgs>(args?: SelectSubset<T, FarmerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Farmer.
     * @param {FarmerDeleteArgs} args - Arguments to delete one Farmer.
     * @example
     * // Delete one Farmer
     * const Farmer = await prisma.farmer.delete({
     *   where: {
     *     // ... filter to delete one Farmer
     *   }
     * })
     * 
     */
    delete<T extends FarmerDeleteArgs>(args: SelectSubset<T, FarmerDeleteArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Farmer.
     * @param {FarmerUpdateArgs} args - Arguments to update one Farmer.
     * @example
     * // Update one Farmer
     * const farmer = await prisma.farmer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FarmerUpdateArgs>(args: SelectSubset<T, FarmerUpdateArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Farmers.
     * @param {FarmerDeleteManyArgs} args - Arguments to filter Farmers to delete.
     * @example
     * // Delete a few Farmers
     * const { count } = await prisma.farmer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FarmerDeleteManyArgs>(args?: SelectSubset<T, FarmerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Farmers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FarmerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Farmers
     * const farmer = await prisma.farmer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FarmerUpdateManyArgs>(args: SelectSubset<T, FarmerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Farmer.
     * @param {FarmerUpsertArgs} args - Arguments to update or create a Farmer.
     * @example
     * // Update or create a Farmer
     * const farmer = await prisma.farmer.upsert({
     *   create: {
     *     // ... data to create a Farmer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Farmer we want to update
     *   }
     * })
     */
    upsert<T extends FarmerUpsertArgs>(args: SelectSubset<T, FarmerUpsertArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Farmers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FarmerCountArgs} args - Arguments to filter Farmers to count.
     * @example
     * // Count the number of Farmers
     * const count = await prisma.farmer.count({
     *   where: {
     *     // ... the filter for the Farmers we want to count
     *   }
     * })
    **/
    count<T extends FarmerCountArgs>(
      args?: Subset<T, FarmerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FarmerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Farmer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FarmerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FarmerAggregateArgs>(args: Subset<T, FarmerAggregateArgs>): Prisma.PrismaPromise<GetFarmerAggregateType<T>>

    /**
     * Group by Farmer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FarmerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FarmerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FarmerGroupByArgs['orderBy'] }
        : { orderBy?: FarmerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FarmerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFarmerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Farmer model
   */
  readonly fields: FarmerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Farmer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FarmerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends Farmer$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Farmer$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionEventPayload<ExtArgs>, T, "findMany"> | Null>
    otpRequests<T extends Farmer$otpRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Farmer$otpRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpRequestPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Farmer model
   */ 
  interface FarmerFieldRefs {
    readonly id: FieldRef<"Farmer", 'String'>
    readonly phone: FieldRef<"Farmer", 'String'>
    readonly name: FieldRef<"Farmer", 'String'>
    readonly village: FieldRef<"Farmer", 'String'>
    readonly district: FieldRef<"Farmer", 'String'>
    readonly state: FieldRef<"Farmer", 'String'>
    readonly isActive: FieldRef<"Farmer", 'Boolean'>
    readonly createdAt: FieldRef<"Farmer", 'DateTime'>
    readonly updatedAt: FieldRef<"Farmer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Farmer findUnique
   */
  export type FarmerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * Filter, which Farmer to fetch.
     */
    where: FarmerWhereUniqueInput
  }

  /**
   * Farmer findUniqueOrThrow
   */
  export type FarmerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * Filter, which Farmer to fetch.
     */
    where: FarmerWhereUniqueInput
  }

  /**
   * Farmer findFirst
   */
  export type FarmerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * Filter, which Farmer to fetch.
     */
    where?: FarmerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Farmers to fetch.
     */
    orderBy?: FarmerOrderByWithRelationInput | FarmerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Farmers.
     */
    cursor?: FarmerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Farmers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Farmers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Farmers.
     */
    distinct?: FarmerScalarFieldEnum | FarmerScalarFieldEnum[]
  }

  /**
   * Farmer findFirstOrThrow
   */
  export type FarmerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * Filter, which Farmer to fetch.
     */
    where?: FarmerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Farmers to fetch.
     */
    orderBy?: FarmerOrderByWithRelationInput | FarmerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Farmers.
     */
    cursor?: FarmerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Farmers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Farmers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Farmers.
     */
    distinct?: FarmerScalarFieldEnum | FarmerScalarFieldEnum[]
  }

  /**
   * Farmer findMany
   */
  export type FarmerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * Filter, which Farmers to fetch.
     */
    where?: FarmerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Farmers to fetch.
     */
    orderBy?: FarmerOrderByWithRelationInput | FarmerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Farmers.
     */
    cursor?: FarmerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Farmers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Farmers.
     */
    skip?: number
    distinct?: FarmerScalarFieldEnum | FarmerScalarFieldEnum[]
  }

  /**
   * Farmer create
   */
  export type FarmerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * The data needed to create a Farmer.
     */
    data: XOR<FarmerCreateInput, FarmerUncheckedCreateInput>
  }

  /**
   * Farmer createMany
   */
  export type FarmerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Farmers.
     */
    data: FarmerCreateManyInput | FarmerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Farmer createManyAndReturn
   */
  export type FarmerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Farmers.
     */
    data: FarmerCreateManyInput | FarmerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Farmer update
   */
  export type FarmerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * The data needed to update a Farmer.
     */
    data: XOR<FarmerUpdateInput, FarmerUncheckedUpdateInput>
    /**
     * Choose, which Farmer to update.
     */
    where: FarmerWhereUniqueInput
  }

  /**
   * Farmer updateMany
   */
  export type FarmerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Farmers.
     */
    data: XOR<FarmerUpdateManyMutationInput, FarmerUncheckedUpdateManyInput>
    /**
     * Filter which Farmers to update
     */
    where?: FarmerWhereInput
  }

  /**
   * Farmer upsert
   */
  export type FarmerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * The filter to search for the Farmer to update in case it exists.
     */
    where: FarmerWhereUniqueInput
    /**
     * In case the Farmer found by the `where` argument doesn't exist, create a new Farmer with this data.
     */
    create: XOR<FarmerCreateInput, FarmerUncheckedCreateInput>
    /**
     * In case the Farmer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FarmerUpdateInput, FarmerUncheckedUpdateInput>
  }

  /**
   * Farmer delete
   */
  export type FarmerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    /**
     * Filter which Farmer to delete.
     */
    where: FarmerWhereUniqueInput
  }

  /**
   * Farmer deleteMany
   */
  export type FarmerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Farmers to delete
     */
    where?: FarmerWhereInput
  }

  /**
   * Farmer.events
   */
  export type Farmer$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionEvent
     */
    select?: CollectionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionEventInclude<ExtArgs> | null
    where?: CollectionEventWhereInput
    orderBy?: CollectionEventOrderByWithRelationInput | CollectionEventOrderByWithRelationInput[]
    cursor?: CollectionEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollectionEventScalarFieldEnum | CollectionEventScalarFieldEnum[]
  }

  /**
   * Farmer.otpRequests
   */
  export type Farmer$otpRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpRequest
     */
    select?: OtpRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpRequestInclude<ExtArgs> | null
    where?: OtpRequestWhereInput
    orderBy?: OtpRequestOrderByWithRelationInput | OtpRequestOrderByWithRelationInput[]
    cursor?: OtpRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OtpRequestScalarFieldEnum | OtpRequestScalarFieldEnum[]
  }

  /**
   * Farmer without action
   */
  export type FarmerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
  }


  /**
   * Model CollectionEvent
   */

  export type AggregateCollectionEvent = {
    _count: CollectionEventCountAggregateOutputType | null
    _avg: CollectionEventAvgAggregateOutputType | null
    _sum: CollectionEventSumAggregateOutputType | null
    _min: CollectionEventMinAggregateOutputType | null
    _max: CollectionEventMaxAggregateOutputType | null
  }

  export type CollectionEventAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
    accuracy: number | null
    altitude: number | null
    moisturePct: number | null
    retryCount: number | null
    maxRetries: number | null
    qualityScore: number | null
  }

  export type CollectionEventSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
    accuracy: number | null
    altitude: number | null
    moisturePct: number | null
    retryCount: number | null
    maxRetries: number | null
    qualityScore: number | null
  }

  export type CollectionEventMinAggregateOutputType = {
    id: string | null
    farmerId: string | null
    species: string | null
    latitude: number | null
    longitude: number | null
    accuracy: number | null
    altitude: number | null
    timestamp: Date | null
    moisturePct: number | null
    notes: string | null
    photoHash: string | null
    photoUrl: string | null
    status: $Enums.EventStatus | null
    txId: string | null
    blockHash: string | null
    lastError: string | null
    retryCount: number | null
    maxRetries: number | null
    createdAt: Date | null
    updatedAt: Date | null
    syncedAt: Date | null
    isValidLocation: boolean | null
    isValidSeason: boolean | null
    qualityScore: number | null
    source: $Enums.EventSource | null
    deviceInfo: string | null
    appVersion: string | null
  }

  export type CollectionEventMaxAggregateOutputType = {
    id: string | null
    farmerId: string | null
    species: string | null
    latitude: number | null
    longitude: number | null
    accuracy: number | null
    altitude: number | null
    timestamp: Date | null
    moisturePct: number | null
    notes: string | null
    photoHash: string | null
    photoUrl: string | null
    status: $Enums.EventStatus | null
    txId: string | null
    blockHash: string | null
    lastError: string | null
    retryCount: number | null
    maxRetries: number | null
    createdAt: Date | null
    updatedAt: Date | null
    syncedAt: Date | null
    isValidLocation: boolean | null
    isValidSeason: boolean | null
    qualityScore: number | null
    source: $Enums.EventSource | null
    deviceInfo: string | null
    appVersion: string | null
  }

  export type CollectionEventCountAggregateOutputType = {
    id: number
    farmerId: number
    species: number
    latitude: number
    longitude: number
    accuracy: number
    altitude: number
    timestamp: number
    moisturePct: number
    notes: number
    photoHash: number
    photoUrl: number
    status: number
    txId: number
    blockHash: number
    lastError: number
    retryCount: number
    maxRetries: number
    createdAt: number
    updatedAt: number
    syncedAt: number
    isValidLocation: number
    isValidSeason: number
    qualityScore: number
    source: number
    deviceInfo: number
    appVersion: number
    _all: number
  }


  export type CollectionEventAvgAggregateInputType = {
    latitude?: true
    longitude?: true
    accuracy?: true
    altitude?: true
    moisturePct?: true
    retryCount?: true
    maxRetries?: true
    qualityScore?: true
  }

  export type CollectionEventSumAggregateInputType = {
    latitude?: true
    longitude?: true
    accuracy?: true
    altitude?: true
    moisturePct?: true
    retryCount?: true
    maxRetries?: true
    qualityScore?: true
  }

  export type CollectionEventMinAggregateInputType = {
    id?: true
    farmerId?: true
    species?: true
    latitude?: true
    longitude?: true
    accuracy?: true
    altitude?: true
    timestamp?: true
    moisturePct?: true
    notes?: true
    photoHash?: true
    photoUrl?: true
    status?: true
    txId?: true
    blockHash?: true
    lastError?: true
    retryCount?: true
    maxRetries?: true
    createdAt?: true
    updatedAt?: true
    syncedAt?: true
    isValidLocation?: true
    isValidSeason?: true
    qualityScore?: true
    source?: true
    deviceInfo?: true
    appVersion?: true
  }

  export type CollectionEventMaxAggregateInputType = {
    id?: true
    farmerId?: true
    species?: true
    latitude?: true
    longitude?: true
    accuracy?: true
    altitude?: true
    timestamp?: true
    moisturePct?: true
    notes?: true
    photoHash?: true
    photoUrl?: true
    status?: true
    txId?: true
    blockHash?: true
    lastError?: true
    retryCount?: true
    maxRetries?: true
    createdAt?: true
    updatedAt?: true
    syncedAt?: true
    isValidLocation?: true
    isValidSeason?: true
    qualityScore?: true
    source?: true
    deviceInfo?: true
    appVersion?: true
  }

  export type CollectionEventCountAggregateInputType = {
    id?: true
    farmerId?: true
    species?: true
    latitude?: true
    longitude?: true
    accuracy?: true
    altitude?: true
    timestamp?: true
    moisturePct?: true
    notes?: true
    photoHash?: true
    photoUrl?: true
    status?: true
    txId?: true
    blockHash?: true
    lastError?: true
    retryCount?: true
    maxRetries?: true
    createdAt?: true
    updatedAt?: true
    syncedAt?: true
    isValidLocation?: true
    isValidSeason?: true
    qualityScore?: true
    source?: true
    deviceInfo?: true
    appVersion?: true
    _all?: true
  }

  export type CollectionEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollectionEvent to aggregate.
     */
    where?: CollectionEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionEvents to fetch.
     */
    orderBy?: CollectionEventOrderByWithRelationInput | CollectionEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollectionEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CollectionEvents
    **/
    _count?: true | CollectionEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CollectionEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CollectionEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollectionEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollectionEventMaxAggregateInputType
  }

  export type GetCollectionEventAggregateType<T extends CollectionEventAggregateArgs> = {
        [P in keyof T & keyof AggregateCollectionEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollectionEvent[P]>
      : GetScalarType<T[P], AggregateCollectionEvent[P]>
  }




  export type CollectionEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionEventWhereInput
    orderBy?: CollectionEventOrderByWithAggregationInput | CollectionEventOrderByWithAggregationInput[]
    by: CollectionEventScalarFieldEnum[] | CollectionEventScalarFieldEnum
    having?: CollectionEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollectionEventCountAggregateInputType | true
    _avg?: CollectionEventAvgAggregateInputType
    _sum?: CollectionEventSumAggregateInputType
    _min?: CollectionEventMinAggregateInputType
    _max?: CollectionEventMaxAggregateInputType
  }

  export type CollectionEventGroupByOutputType = {
    id: string
    farmerId: string
    species: string
    latitude: number
    longitude: number
    accuracy: number | null
    altitude: number | null
    timestamp: Date
    moisturePct: number | null
    notes: string | null
    photoHash: string | null
    photoUrl: string | null
    status: $Enums.EventStatus
    txId: string | null
    blockHash: string | null
    lastError: string | null
    retryCount: number
    maxRetries: number
    createdAt: Date
    updatedAt: Date
    syncedAt: Date | null
    isValidLocation: boolean
    isValidSeason: boolean
    qualityScore: number | null
    source: $Enums.EventSource
    deviceInfo: string | null
    appVersion: string | null
    _count: CollectionEventCountAggregateOutputType | null
    _avg: CollectionEventAvgAggregateOutputType | null
    _sum: CollectionEventSumAggregateOutputType | null
    _min: CollectionEventMinAggregateOutputType | null
    _max: CollectionEventMaxAggregateOutputType | null
  }

  type GetCollectionEventGroupByPayload<T extends CollectionEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollectionEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollectionEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollectionEventGroupByOutputType[P]>
            : GetScalarType<T[P], CollectionEventGroupByOutputType[P]>
        }
      >
    >


  export type CollectionEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    farmerId?: boolean
    species?: boolean
    latitude?: boolean
    longitude?: boolean
    accuracy?: boolean
    altitude?: boolean
    timestamp?: boolean
    moisturePct?: boolean
    notes?: boolean
    photoHash?: boolean
    photoUrl?: boolean
    status?: boolean
    txId?: boolean
    blockHash?: boolean
    lastError?: boolean
    retryCount?: boolean
    maxRetries?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    syncedAt?: boolean
    isValidLocation?: boolean
    isValidSeason?: boolean
    qualityScore?: boolean
    source?: boolean
    deviceInfo?: boolean
    appVersion?: boolean
    farmer?: boolean | FarmerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collectionEvent"]>

  export type CollectionEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    farmerId?: boolean
    species?: boolean
    latitude?: boolean
    longitude?: boolean
    accuracy?: boolean
    altitude?: boolean
    timestamp?: boolean
    moisturePct?: boolean
    notes?: boolean
    photoHash?: boolean
    photoUrl?: boolean
    status?: boolean
    txId?: boolean
    blockHash?: boolean
    lastError?: boolean
    retryCount?: boolean
    maxRetries?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    syncedAt?: boolean
    isValidLocation?: boolean
    isValidSeason?: boolean
    qualityScore?: boolean
    source?: boolean
    deviceInfo?: boolean
    appVersion?: boolean
    farmer?: boolean | FarmerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collectionEvent"]>

  export type CollectionEventSelectScalar = {
    id?: boolean
    farmerId?: boolean
    species?: boolean
    latitude?: boolean
    longitude?: boolean
    accuracy?: boolean
    altitude?: boolean
    timestamp?: boolean
    moisturePct?: boolean
    notes?: boolean
    photoHash?: boolean
    photoUrl?: boolean
    status?: boolean
    txId?: boolean
    blockHash?: boolean
    lastError?: boolean
    retryCount?: boolean
    maxRetries?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    syncedAt?: boolean
    isValidLocation?: boolean
    isValidSeason?: boolean
    qualityScore?: boolean
    source?: boolean
    deviceInfo?: boolean
    appVersion?: boolean
  }

  export type CollectionEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    farmer?: boolean | FarmerDefaultArgs<ExtArgs>
  }
  export type CollectionEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    farmer?: boolean | FarmerDefaultArgs<ExtArgs>
  }

  export type $CollectionEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CollectionEvent"
    objects: {
      farmer: Prisma.$FarmerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      farmerId: string
      species: string
      latitude: number
      longitude: number
      accuracy: number | null
      altitude: number | null
      timestamp: Date
      moisturePct: number | null
      notes: string | null
      photoHash: string | null
      photoUrl: string | null
      status: $Enums.EventStatus
      txId: string | null
      blockHash: string | null
      lastError: string | null
      retryCount: number
      maxRetries: number
      createdAt: Date
      updatedAt: Date
      syncedAt: Date | null
      isValidLocation: boolean
      isValidSeason: boolean
      qualityScore: number | null
      source: $Enums.EventSource
      deviceInfo: string | null
      appVersion: string | null
    }, ExtArgs["result"]["collectionEvent"]>
    composites: {}
  }

  type CollectionEventGetPayload<S extends boolean | null | undefined | CollectionEventDefaultArgs> = $Result.GetResult<Prisma.$CollectionEventPayload, S>

  type CollectionEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CollectionEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CollectionEventCountAggregateInputType | true
    }

  export interface CollectionEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CollectionEvent'], meta: { name: 'CollectionEvent' } }
    /**
     * Find zero or one CollectionEvent that matches the filter.
     * @param {CollectionEventFindUniqueArgs} args - Arguments to find a CollectionEvent
     * @example
     * // Get one CollectionEvent
     * const collectionEvent = await prisma.collectionEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CollectionEventFindUniqueArgs>(args: SelectSubset<T, CollectionEventFindUniqueArgs<ExtArgs>>): Prisma__CollectionEventClient<$Result.GetResult<Prisma.$CollectionEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CollectionEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CollectionEventFindUniqueOrThrowArgs} args - Arguments to find a CollectionEvent
     * @example
     * // Get one CollectionEvent
     * const collectionEvent = await prisma.collectionEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CollectionEventFindUniqueOrThrowArgs>(args: SelectSubset<T, CollectionEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CollectionEventClient<$Result.GetResult<Prisma.$CollectionEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CollectionEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionEventFindFirstArgs} args - Arguments to find a CollectionEvent
     * @example
     * // Get one CollectionEvent
     * const collectionEvent = await prisma.collectionEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CollectionEventFindFirstArgs>(args?: SelectSubset<T, CollectionEventFindFirstArgs<ExtArgs>>): Prisma__CollectionEventClient<$Result.GetResult<Prisma.$CollectionEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CollectionEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionEventFindFirstOrThrowArgs} args - Arguments to find a CollectionEvent
     * @example
     * // Get one CollectionEvent
     * const collectionEvent = await prisma.collectionEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CollectionEventFindFirstOrThrowArgs>(args?: SelectSubset<T, CollectionEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__CollectionEventClient<$Result.GetResult<Prisma.$CollectionEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CollectionEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CollectionEvents
     * const collectionEvents = await prisma.collectionEvent.findMany()
     * 
     * // Get first 10 CollectionEvents
     * const collectionEvents = await prisma.collectionEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collectionEventWithIdOnly = await prisma.collectionEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CollectionEventFindManyArgs>(args?: SelectSubset<T, CollectionEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CollectionEvent.
     * @param {CollectionEventCreateArgs} args - Arguments to create a CollectionEvent.
     * @example
     * // Create one CollectionEvent
     * const CollectionEvent = await prisma.collectionEvent.create({
     *   data: {
     *     // ... data to create a CollectionEvent
     *   }
     * })
     * 
     */
    create<T extends CollectionEventCreateArgs>(args: SelectSubset<T, CollectionEventCreateArgs<ExtArgs>>): Prisma__CollectionEventClient<$Result.GetResult<Prisma.$CollectionEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CollectionEvents.
     * @param {CollectionEventCreateManyArgs} args - Arguments to create many CollectionEvents.
     * @example
     * // Create many CollectionEvents
     * const collectionEvent = await prisma.collectionEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CollectionEventCreateManyArgs>(args?: SelectSubset<T, CollectionEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CollectionEvents and returns the data saved in the database.
     * @param {CollectionEventCreateManyAndReturnArgs} args - Arguments to create many CollectionEvents.
     * @example
     * // Create many CollectionEvents
     * const collectionEvent = await prisma.collectionEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CollectionEvents and only return the `id`
     * const collectionEventWithIdOnly = await prisma.collectionEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CollectionEventCreateManyAndReturnArgs>(args?: SelectSubset<T, CollectionEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CollectionEvent.
     * @param {CollectionEventDeleteArgs} args - Arguments to delete one CollectionEvent.
     * @example
     * // Delete one CollectionEvent
     * const CollectionEvent = await prisma.collectionEvent.delete({
     *   where: {
     *     // ... filter to delete one CollectionEvent
     *   }
     * })
     * 
     */
    delete<T extends CollectionEventDeleteArgs>(args: SelectSubset<T, CollectionEventDeleteArgs<ExtArgs>>): Prisma__CollectionEventClient<$Result.GetResult<Prisma.$CollectionEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CollectionEvent.
     * @param {CollectionEventUpdateArgs} args - Arguments to update one CollectionEvent.
     * @example
     * // Update one CollectionEvent
     * const collectionEvent = await prisma.collectionEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CollectionEventUpdateArgs>(args: SelectSubset<T, CollectionEventUpdateArgs<ExtArgs>>): Prisma__CollectionEventClient<$Result.GetResult<Prisma.$CollectionEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CollectionEvents.
     * @param {CollectionEventDeleteManyArgs} args - Arguments to filter CollectionEvents to delete.
     * @example
     * // Delete a few CollectionEvents
     * const { count } = await prisma.collectionEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CollectionEventDeleteManyArgs>(args?: SelectSubset<T, CollectionEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CollectionEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CollectionEvents
     * const collectionEvent = await prisma.collectionEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CollectionEventUpdateManyArgs>(args: SelectSubset<T, CollectionEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CollectionEvent.
     * @param {CollectionEventUpsertArgs} args - Arguments to update or create a CollectionEvent.
     * @example
     * // Update or create a CollectionEvent
     * const collectionEvent = await prisma.collectionEvent.upsert({
     *   create: {
     *     // ... data to create a CollectionEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CollectionEvent we want to update
     *   }
     * })
     */
    upsert<T extends CollectionEventUpsertArgs>(args: SelectSubset<T, CollectionEventUpsertArgs<ExtArgs>>): Prisma__CollectionEventClient<$Result.GetResult<Prisma.$CollectionEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CollectionEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionEventCountArgs} args - Arguments to filter CollectionEvents to count.
     * @example
     * // Count the number of CollectionEvents
     * const count = await prisma.collectionEvent.count({
     *   where: {
     *     // ... the filter for the CollectionEvents we want to count
     *   }
     * })
    **/
    count<T extends CollectionEventCountArgs>(
      args?: Subset<T, CollectionEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollectionEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CollectionEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollectionEventAggregateArgs>(args: Subset<T, CollectionEventAggregateArgs>): Prisma.PrismaPromise<GetCollectionEventAggregateType<T>>

    /**
     * Group by CollectionEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollectionEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollectionEventGroupByArgs['orderBy'] }
        : { orderBy?: CollectionEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollectionEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollectionEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CollectionEvent model
   */
  readonly fields: CollectionEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CollectionEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollectionEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    farmer<T extends FarmerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FarmerDefaultArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CollectionEvent model
   */ 
  interface CollectionEventFieldRefs {
    readonly id: FieldRef<"CollectionEvent", 'String'>
    readonly farmerId: FieldRef<"CollectionEvent", 'String'>
    readonly species: FieldRef<"CollectionEvent", 'String'>
    readonly latitude: FieldRef<"CollectionEvent", 'Float'>
    readonly longitude: FieldRef<"CollectionEvent", 'Float'>
    readonly accuracy: FieldRef<"CollectionEvent", 'Float'>
    readonly altitude: FieldRef<"CollectionEvent", 'Float'>
    readonly timestamp: FieldRef<"CollectionEvent", 'DateTime'>
    readonly moisturePct: FieldRef<"CollectionEvent", 'Float'>
    readonly notes: FieldRef<"CollectionEvent", 'String'>
    readonly photoHash: FieldRef<"CollectionEvent", 'String'>
    readonly photoUrl: FieldRef<"CollectionEvent", 'String'>
    readonly status: FieldRef<"CollectionEvent", 'EventStatus'>
    readonly txId: FieldRef<"CollectionEvent", 'String'>
    readonly blockHash: FieldRef<"CollectionEvent", 'String'>
    readonly lastError: FieldRef<"CollectionEvent", 'String'>
    readonly retryCount: FieldRef<"CollectionEvent", 'Int'>
    readonly maxRetries: FieldRef<"CollectionEvent", 'Int'>
    readonly createdAt: FieldRef<"CollectionEvent", 'DateTime'>
    readonly updatedAt: FieldRef<"CollectionEvent", 'DateTime'>
    readonly syncedAt: FieldRef<"CollectionEvent", 'DateTime'>
    readonly isValidLocation: FieldRef<"CollectionEvent", 'Boolean'>
    readonly isValidSeason: FieldRef<"CollectionEvent", 'Boolean'>
    readonly qualityScore: FieldRef<"CollectionEvent", 'Float'>
    readonly source: FieldRef<"CollectionEvent", 'EventSource'>
    readonly deviceInfo: FieldRef<"CollectionEvent", 'String'>
    readonly appVersion: FieldRef<"CollectionEvent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CollectionEvent findUnique
   */
  export type CollectionEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionEvent
     */
    select?: CollectionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionEventInclude<ExtArgs> | null
    /**
     * Filter, which CollectionEvent to fetch.
     */
    where: CollectionEventWhereUniqueInput
  }

  /**
   * CollectionEvent findUniqueOrThrow
   */
  export type CollectionEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionEvent
     */
    select?: CollectionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionEventInclude<ExtArgs> | null
    /**
     * Filter, which CollectionEvent to fetch.
     */
    where: CollectionEventWhereUniqueInput
  }

  /**
   * CollectionEvent findFirst
   */
  export type CollectionEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionEvent
     */
    select?: CollectionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionEventInclude<ExtArgs> | null
    /**
     * Filter, which CollectionEvent to fetch.
     */
    where?: CollectionEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionEvents to fetch.
     */
    orderBy?: CollectionEventOrderByWithRelationInput | CollectionEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollectionEvents.
     */
    cursor?: CollectionEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollectionEvents.
     */
    distinct?: CollectionEventScalarFieldEnum | CollectionEventScalarFieldEnum[]
  }

  /**
   * CollectionEvent findFirstOrThrow
   */
  export type CollectionEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionEvent
     */
    select?: CollectionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionEventInclude<ExtArgs> | null
    /**
     * Filter, which CollectionEvent to fetch.
     */
    where?: CollectionEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionEvents to fetch.
     */
    orderBy?: CollectionEventOrderByWithRelationInput | CollectionEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollectionEvents.
     */
    cursor?: CollectionEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollectionEvents.
     */
    distinct?: CollectionEventScalarFieldEnum | CollectionEventScalarFieldEnum[]
  }

  /**
   * CollectionEvent findMany
   */
  export type CollectionEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionEvent
     */
    select?: CollectionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionEventInclude<ExtArgs> | null
    /**
     * Filter, which CollectionEvents to fetch.
     */
    where?: CollectionEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionEvents to fetch.
     */
    orderBy?: CollectionEventOrderByWithRelationInput | CollectionEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CollectionEvents.
     */
    cursor?: CollectionEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionEvents.
     */
    skip?: number
    distinct?: CollectionEventScalarFieldEnum | CollectionEventScalarFieldEnum[]
  }

  /**
   * CollectionEvent create
   */
  export type CollectionEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionEvent
     */
    select?: CollectionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionEventInclude<ExtArgs> | null
    /**
     * The data needed to create a CollectionEvent.
     */
    data: XOR<CollectionEventCreateInput, CollectionEventUncheckedCreateInput>
  }

  /**
   * CollectionEvent createMany
   */
  export type CollectionEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CollectionEvents.
     */
    data: CollectionEventCreateManyInput | CollectionEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CollectionEvent createManyAndReturn
   */
  export type CollectionEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionEvent
     */
    select?: CollectionEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CollectionEvents.
     */
    data: CollectionEventCreateManyInput | CollectionEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CollectionEvent update
   */
  export type CollectionEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionEvent
     */
    select?: CollectionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionEventInclude<ExtArgs> | null
    /**
     * The data needed to update a CollectionEvent.
     */
    data: XOR<CollectionEventUpdateInput, CollectionEventUncheckedUpdateInput>
    /**
     * Choose, which CollectionEvent to update.
     */
    where: CollectionEventWhereUniqueInput
  }

  /**
   * CollectionEvent updateMany
   */
  export type CollectionEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CollectionEvents.
     */
    data: XOR<CollectionEventUpdateManyMutationInput, CollectionEventUncheckedUpdateManyInput>
    /**
     * Filter which CollectionEvents to update
     */
    where?: CollectionEventWhereInput
  }

  /**
   * CollectionEvent upsert
   */
  export type CollectionEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionEvent
     */
    select?: CollectionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionEventInclude<ExtArgs> | null
    /**
     * The filter to search for the CollectionEvent to update in case it exists.
     */
    where: CollectionEventWhereUniqueInput
    /**
     * In case the CollectionEvent found by the `where` argument doesn't exist, create a new CollectionEvent with this data.
     */
    create: XOR<CollectionEventCreateInput, CollectionEventUncheckedCreateInput>
    /**
     * In case the CollectionEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollectionEventUpdateInput, CollectionEventUncheckedUpdateInput>
  }

  /**
   * CollectionEvent delete
   */
  export type CollectionEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionEvent
     */
    select?: CollectionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionEventInclude<ExtArgs> | null
    /**
     * Filter which CollectionEvent to delete.
     */
    where: CollectionEventWhereUniqueInput
  }

  /**
   * CollectionEvent deleteMany
   */
  export type CollectionEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollectionEvents to delete
     */
    where?: CollectionEventWhereInput
  }

  /**
   * CollectionEvent without action
   */
  export type CollectionEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionEvent
     */
    select?: CollectionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionEventInclude<ExtArgs> | null
  }


  /**
   * Model OtpRequest
   */

  export type AggregateOtpRequest = {
    _count: OtpRequestCountAggregateOutputType | null
    _min: OtpRequestMinAggregateOutputType | null
    _max: OtpRequestMaxAggregateOutputType | null
  }

  export type OtpRequestMinAggregateOutputType = {
    id: string | null
    farmerId: string | null
    phone: string | null
    otp: string | null
    isUsed: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
    usedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
  }

  export type OtpRequestMaxAggregateOutputType = {
    id: string | null
    farmerId: string | null
    phone: string | null
    otp: string | null
    isUsed: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
    usedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
  }

  export type OtpRequestCountAggregateOutputType = {
    id: number
    farmerId: number
    phone: number
    otp: number
    isUsed: number
    expiresAt: number
    createdAt: number
    usedAt: number
    ipAddress: number
    userAgent: number
    _all: number
  }


  export type OtpRequestMinAggregateInputType = {
    id?: true
    farmerId?: true
    phone?: true
    otp?: true
    isUsed?: true
    expiresAt?: true
    createdAt?: true
    usedAt?: true
    ipAddress?: true
    userAgent?: true
  }

  export type OtpRequestMaxAggregateInputType = {
    id?: true
    farmerId?: true
    phone?: true
    otp?: true
    isUsed?: true
    expiresAt?: true
    createdAt?: true
    usedAt?: true
    ipAddress?: true
    userAgent?: true
  }

  export type OtpRequestCountAggregateInputType = {
    id?: true
    farmerId?: true
    phone?: true
    otp?: true
    isUsed?: true
    expiresAt?: true
    createdAt?: true
    usedAt?: true
    ipAddress?: true
    userAgent?: true
    _all?: true
  }

  export type OtpRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OtpRequest to aggregate.
     */
    where?: OtpRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpRequests to fetch.
     */
    orderBy?: OtpRequestOrderByWithRelationInput | OtpRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OtpRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OtpRequests
    **/
    _count?: true | OtpRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OtpRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OtpRequestMaxAggregateInputType
  }

  export type GetOtpRequestAggregateType<T extends OtpRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateOtpRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOtpRequest[P]>
      : GetScalarType<T[P], AggregateOtpRequest[P]>
  }




  export type OtpRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtpRequestWhereInput
    orderBy?: OtpRequestOrderByWithAggregationInput | OtpRequestOrderByWithAggregationInput[]
    by: OtpRequestScalarFieldEnum[] | OtpRequestScalarFieldEnum
    having?: OtpRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OtpRequestCountAggregateInputType | true
    _min?: OtpRequestMinAggregateInputType
    _max?: OtpRequestMaxAggregateInputType
  }

  export type OtpRequestGroupByOutputType = {
    id: string
    farmerId: string | null
    phone: string
    otp: string
    isUsed: boolean
    expiresAt: Date
    createdAt: Date
    usedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    _count: OtpRequestCountAggregateOutputType | null
    _min: OtpRequestMinAggregateOutputType | null
    _max: OtpRequestMaxAggregateOutputType | null
  }

  type GetOtpRequestGroupByPayload<T extends OtpRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OtpRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OtpRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OtpRequestGroupByOutputType[P]>
            : GetScalarType<T[P], OtpRequestGroupByOutputType[P]>
        }
      >
    >


  export type OtpRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    farmerId?: boolean
    phone?: boolean
    otp?: boolean
    isUsed?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    usedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    farmer?: boolean | OtpRequest$farmerArgs<ExtArgs>
  }, ExtArgs["result"]["otpRequest"]>

  export type OtpRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    farmerId?: boolean
    phone?: boolean
    otp?: boolean
    isUsed?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    usedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    farmer?: boolean | OtpRequest$farmerArgs<ExtArgs>
  }, ExtArgs["result"]["otpRequest"]>

  export type OtpRequestSelectScalar = {
    id?: boolean
    farmerId?: boolean
    phone?: boolean
    otp?: boolean
    isUsed?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    usedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
  }

  export type OtpRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    farmer?: boolean | OtpRequest$farmerArgs<ExtArgs>
  }
  export type OtpRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    farmer?: boolean | OtpRequest$farmerArgs<ExtArgs>
  }

  export type $OtpRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OtpRequest"
    objects: {
      farmer: Prisma.$FarmerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      farmerId: string | null
      phone: string
      otp: string
      isUsed: boolean
      expiresAt: Date
      createdAt: Date
      usedAt: Date | null
      ipAddress: string | null
      userAgent: string | null
    }, ExtArgs["result"]["otpRequest"]>
    composites: {}
  }

  type OtpRequestGetPayload<S extends boolean | null | undefined | OtpRequestDefaultArgs> = $Result.GetResult<Prisma.$OtpRequestPayload, S>

  type OtpRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OtpRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OtpRequestCountAggregateInputType | true
    }

  export interface OtpRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OtpRequest'], meta: { name: 'OtpRequest' } }
    /**
     * Find zero or one OtpRequest that matches the filter.
     * @param {OtpRequestFindUniqueArgs} args - Arguments to find a OtpRequest
     * @example
     * // Get one OtpRequest
     * const otpRequest = await prisma.otpRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OtpRequestFindUniqueArgs>(args: SelectSubset<T, OtpRequestFindUniqueArgs<ExtArgs>>): Prisma__OtpRequestClient<$Result.GetResult<Prisma.$OtpRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OtpRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OtpRequestFindUniqueOrThrowArgs} args - Arguments to find a OtpRequest
     * @example
     * // Get one OtpRequest
     * const otpRequest = await prisma.otpRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OtpRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, OtpRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OtpRequestClient<$Result.GetResult<Prisma.$OtpRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OtpRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpRequestFindFirstArgs} args - Arguments to find a OtpRequest
     * @example
     * // Get one OtpRequest
     * const otpRequest = await prisma.otpRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OtpRequestFindFirstArgs>(args?: SelectSubset<T, OtpRequestFindFirstArgs<ExtArgs>>): Prisma__OtpRequestClient<$Result.GetResult<Prisma.$OtpRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OtpRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpRequestFindFirstOrThrowArgs} args - Arguments to find a OtpRequest
     * @example
     * // Get one OtpRequest
     * const otpRequest = await prisma.otpRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OtpRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, OtpRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__OtpRequestClient<$Result.GetResult<Prisma.$OtpRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OtpRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OtpRequests
     * const otpRequests = await prisma.otpRequest.findMany()
     * 
     * // Get first 10 OtpRequests
     * const otpRequests = await prisma.otpRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const otpRequestWithIdOnly = await prisma.otpRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OtpRequestFindManyArgs>(args?: SelectSubset<T, OtpRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OtpRequest.
     * @param {OtpRequestCreateArgs} args - Arguments to create a OtpRequest.
     * @example
     * // Create one OtpRequest
     * const OtpRequest = await prisma.otpRequest.create({
     *   data: {
     *     // ... data to create a OtpRequest
     *   }
     * })
     * 
     */
    create<T extends OtpRequestCreateArgs>(args: SelectSubset<T, OtpRequestCreateArgs<ExtArgs>>): Prisma__OtpRequestClient<$Result.GetResult<Prisma.$OtpRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OtpRequests.
     * @param {OtpRequestCreateManyArgs} args - Arguments to create many OtpRequests.
     * @example
     * // Create many OtpRequests
     * const otpRequest = await prisma.otpRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OtpRequestCreateManyArgs>(args?: SelectSubset<T, OtpRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OtpRequests and returns the data saved in the database.
     * @param {OtpRequestCreateManyAndReturnArgs} args - Arguments to create many OtpRequests.
     * @example
     * // Create many OtpRequests
     * const otpRequest = await prisma.otpRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OtpRequests and only return the `id`
     * const otpRequestWithIdOnly = await prisma.otpRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OtpRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, OtpRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OtpRequest.
     * @param {OtpRequestDeleteArgs} args - Arguments to delete one OtpRequest.
     * @example
     * // Delete one OtpRequest
     * const OtpRequest = await prisma.otpRequest.delete({
     *   where: {
     *     // ... filter to delete one OtpRequest
     *   }
     * })
     * 
     */
    delete<T extends OtpRequestDeleteArgs>(args: SelectSubset<T, OtpRequestDeleteArgs<ExtArgs>>): Prisma__OtpRequestClient<$Result.GetResult<Prisma.$OtpRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OtpRequest.
     * @param {OtpRequestUpdateArgs} args - Arguments to update one OtpRequest.
     * @example
     * // Update one OtpRequest
     * const otpRequest = await prisma.otpRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OtpRequestUpdateArgs>(args: SelectSubset<T, OtpRequestUpdateArgs<ExtArgs>>): Prisma__OtpRequestClient<$Result.GetResult<Prisma.$OtpRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OtpRequests.
     * @param {OtpRequestDeleteManyArgs} args - Arguments to filter OtpRequests to delete.
     * @example
     * // Delete a few OtpRequests
     * const { count } = await prisma.otpRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OtpRequestDeleteManyArgs>(args?: SelectSubset<T, OtpRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OtpRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OtpRequests
     * const otpRequest = await prisma.otpRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OtpRequestUpdateManyArgs>(args: SelectSubset<T, OtpRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OtpRequest.
     * @param {OtpRequestUpsertArgs} args - Arguments to update or create a OtpRequest.
     * @example
     * // Update or create a OtpRequest
     * const otpRequest = await prisma.otpRequest.upsert({
     *   create: {
     *     // ... data to create a OtpRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OtpRequest we want to update
     *   }
     * })
     */
    upsert<T extends OtpRequestUpsertArgs>(args: SelectSubset<T, OtpRequestUpsertArgs<ExtArgs>>): Prisma__OtpRequestClient<$Result.GetResult<Prisma.$OtpRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OtpRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpRequestCountArgs} args - Arguments to filter OtpRequests to count.
     * @example
     * // Count the number of OtpRequests
     * const count = await prisma.otpRequest.count({
     *   where: {
     *     // ... the filter for the OtpRequests we want to count
     *   }
     * })
    **/
    count<T extends OtpRequestCountArgs>(
      args?: Subset<T, OtpRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OtpRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OtpRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OtpRequestAggregateArgs>(args: Subset<T, OtpRequestAggregateArgs>): Prisma.PrismaPromise<GetOtpRequestAggregateType<T>>

    /**
     * Group by OtpRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OtpRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OtpRequestGroupByArgs['orderBy'] }
        : { orderBy?: OtpRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OtpRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOtpRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OtpRequest model
   */
  readonly fields: OtpRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OtpRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OtpRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    farmer<T extends OtpRequest$farmerArgs<ExtArgs> = {}>(args?: Subset<T, OtpRequest$farmerArgs<ExtArgs>>): Prisma__FarmerClient<$Result.GetResult<Prisma.$FarmerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OtpRequest model
   */ 
  interface OtpRequestFieldRefs {
    readonly id: FieldRef<"OtpRequest", 'String'>
    readonly farmerId: FieldRef<"OtpRequest", 'String'>
    readonly phone: FieldRef<"OtpRequest", 'String'>
    readonly otp: FieldRef<"OtpRequest", 'String'>
    readonly isUsed: FieldRef<"OtpRequest", 'Boolean'>
    readonly expiresAt: FieldRef<"OtpRequest", 'DateTime'>
    readonly createdAt: FieldRef<"OtpRequest", 'DateTime'>
    readonly usedAt: FieldRef<"OtpRequest", 'DateTime'>
    readonly ipAddress: FieldRef<"OtpRequest", 'String'>
    readonly userAgent: FieldRef<"OtpRequest", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OtpRequest findUnique
   */
  export type OtpRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpRequest
     */
    select?: OtpRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpRequestInclude<ExtArgs> | null
    /**
     * Filter, which OtpRequest to fetch.
     */
    where: OtpRequestWhereUniqueInput
  }

  /**
   * OtpRequest findUniqueOrThrow
   */
  export type OtpRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpRequest
     */
    select?: OtpRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpRequestInclude<ExtArgs> | null
    /**
     * Filter, which OtpRequest to fetch.
     */
    where: OtpRequestWhereUniqueInput
  }

  /**
   * OtpRequest findFirst
   */
  export type OtpRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpRequest
     */
    select?: OtpRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpRequestInclude<ExtArgs> | null
    /**
     * Filter, which OtpRequest to fetch.
     */
    where?: OtpRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpRequests to fetch.
     */
    orderBy?: OtpRequestOrderByWithRelationInput | OtpRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OtpRequests.
     */
    cursor?: OtpRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OtpRequests.
     */
    distinct?: OtpRequestScalarFieldEnum | OtpRequestScalarFieldEnum[]
  }

  /**
   * OtpRequest findFirstOrThrow
   */
  export type OtpRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpRequest
     */
    select?: OtpRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpRequestInclude<ExtArgs> | null
    /**
     * Filter, which OtpRequest to fetch.
     */
    where?: OtpRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpRequests to fetch.
     */
    orderBy?: OtpRequestOrderByWithRelationInput | OtpRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OtpRequests.
     */
    cursor?: OtpRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OtpRequests.
     */
    distinct?: OtpRequestScalarFieldEnum | OtpRequestScalarFieldEnum[]
  }

  /**
   * OtpRequest findMany
   */
  export type OtpRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpRequest
     */
    select?: OtpRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpRequestInclude<ExtArgs> | null
    /**
     * Filter, which OtpRequests to fetch.
     */
    where?: OtpRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpRequests to fetch.
     */
    orderBy?: OtpRequestOrderByWithRelationInput | OtpRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OtpRequests.
     */
    cursor?: OtpRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpRequests.
     */
    skip?: number
    distinct?: OtpRequestScalarFieldEnum | OtpRequestScalarFieldEnum[]
  }

  /**
   * OtpRequest create
   */
  export type OtpRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpRequest
     */
    select?: OtpRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a OtpRequest.
     */
    data: XOR<OtpRequestCreateInput, OtpRequestUncheckedCreateInput>
  }

  /**
   * OtpRequest createMany
   */
  export type OtpRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OtpRequests.
     */
    data: OtpRequestCreateManyInput | OtpRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OtpRequest createManyAndReturn
   */
  export type OtpRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpRequest
     */
    select?: OtpRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OtpRequests.
     */
    data: OtpRequestCreateManyInput | OtpRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OtpRequest update
   */
  export type OtpRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpRequest
     */
    select?: OtpRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a OtpRequest.
     */
    data: XOR<OtpRequestUpdateInput, OtpRequestUncheckedUpdateInput>
    /**
     * Choose, which OtpRequest to update.
     */
    where: OtpRequestWhereUniqueInput
  }

  /**
   * OtpRequest updateMany
   */
  export type OtpRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OtpRequests.
     */
    data: XOR<OtpRequestUpdateManyMutationInput, OtpRequestUncheckedUpdateManyInput>
    /**
     * Filter which OtpRequests to update
     */
    where?: OtpRequestWhereInput
  }

  /**
   * OtpRequest upsert
   */
  export type OtpRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpRequest
     */
    select?: OtpRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the OtpRequest to update in case it exists.
     */
    where: OtpRequestWhereUniqueInput
    /**
     * In case the OtpRequest found by the `where` argument doesn't exist, create a new OtpRequest with this data.
     */
    create: XOR<OtpRequestCreateInput, OtpRequestUncheckedCreateInput>
    /**
     * In case the OtpRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OtpRequestUpdateInput, OtpRequestUncheckedUpdateInput>
  }

  /**
   * OtpRequest delete
   */
  export type OtpRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpRequest
     */
    select?: OtpRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpRequestInclude<ExtArgs> | null
    /**
     * Filter which OtpRequest to delete.
     */
    where: OtpRequestWhereUniqueInput
  }

  /**
   * OtpRequest deleteMany
   */
  export type OtpRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OtpRequests to delete
     */
    where?: OtpRequestWhereInput
  }

  /**
   * OtpRequest.farmer
   */
  export type OtpRequest$farmerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Farmer
     */
    select?: FarmerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FarmerInclude<ExtArgs> | null
    where?: FarmerWhereInput
  }

  /**
   * OtpRequest without action
   */
  export type OtpRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpRequest
     */
    select?: OtpRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpRequestInclude<ExtArgs> | null
  }


  /**
   * Model SyncJob
   */

  export type AggregateSyncJob = {
    _count: SyncJobCountAggregateOutputType | null
    _avg: SyncJobAvgAggregateOutputType | null
    _sum: SyncJobSumAggregateOutputType | null
    _min: SyncJobMinAggregateOutputType | null
    _max: SyncJobMaxAggregateOutputType | null
  }

  export type SyncJobAvgAggregateOutputType = {
    attempts: number | null
    maxAttempts: number | null
  }

  export type SyncJobSumAggregateOutputType = {
    attempts: number | null
    maxAttempts: number | null
  }

  export type SyncJobMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    status: $Enums.JobStatus | null
    attempts: number | null
    maxAttempts: number | null
    lastError: string | null
    scheduledAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SyncJobMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    status: $Enums.JobStatus | null
    attempts: number | null
    maxAttempts: number | null
    lastError: string | null
    scheduledAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SyncJobCountAggregateOutputType = {
    id: number
    eventId: number
    status: number
    attempts: number
    maxAttempts: number
    lastError: number
    scheduledAt: number
    startedAt: number
    completedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SyncJobAvgAggregateInputType = {
    attempts?: true
    maxAttempts?: true
  }

  export type SyncJobSumAggregateInputType = {
    attempts?: true
    maxAttempts?: true
  }

  export type SyncJobMinAggregateInputType = {
    id?: true
    eventId?: true
    status?: true
    attempts?: true
    maxAttempts?: true
    lastError?: true
    scheduledAt?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SyncJobMaxAggregateInputType = {
    id?: true
    eventId?: true
    status?: true
    attempts?: true
    maxAttempts?: true
    lastError?: true
    scheduledAt?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SyncJobCountAggregateInputType = {
    id?: true
    eventId?: true
    status?: true
    attempts?: true
    maxAttempts?: true
    lastError?: true
    scheduledAt?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SyncJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SyncJob to aggregate.
     */
    where?: SyncJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncJobs to fetch.
     */
    orderBy?: SyncJobOrderByWithRelationInput | SyncJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SyncJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SyncJobs
    **/
    _count?: true | SyncJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SyncJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SyncJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SyncJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SyncJobMaxAggregateInputType
  }

  export type GetSyncJobAggregateType<T extends SyncJobAggregateArgs> = {
        [P in keyof T & keyof AggregateSyncJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSyncJob[P]>
      : GetScalarType<T[P], AggregateSyncJob[P]>
  }




  export type SyncJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SyncJobWhereInput
    orderBy?: SyncJobOrderByWithAggregationInput | SyncJobOrderByWithAggregationInput[]
    by: SyncJobScalarFieldEnum[] | SyncJobScalarFieldEnum
    having?: SyncJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SyncJobCountAggregateInputType | true
    _avg?: SyncJobAvgAggregateInputType
    _sum?: SyncJobSumAggregateInputType
    _min?: SyncJobMinAggregateInputType
    _max?: SyncJobMaxAggregateInputType
  }

  export type SyncJobGroupByOutputType = {
    id: string
    eventId: string
    status: $Enums.JobStatus
    attempts: number
    maxAttempts: number
    lastError: string | null
    scheduledAt: Date
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: SyncJobCountAggregateOutputType | null
    _avg: SyncJobAvgAggregateOutputType | null
    _sum: SyncJobSumAggregateOutputType | null
    _min: SyncJobMinAggregateOutputType | null
    _max: SyncJobMaxAggregateOutputType | null
  }

  type GetSyncJobGroupByPayload<T extends SyncJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SyncJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SyncJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SyncJobGroupByOutputType[P]>
            : GetScalarType<T[P], SyncJobGroupByOutputType[P]>
        }
      >
    >


  export type SyncJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    status?: boolean
    attempts?: boolean
    maxAttempts?: boolean
    lastError?: boolean
    scheduledAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["syncJob"]>

  export type SyncJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    status?: boolean
    attempts?: boolean
    maxAttempts?: boolean
    lastError?: boolean
    scheduledAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["syncJob"]>

  export type SyncJobSelectScalar = {
    id?: boolean
    eventId?: boolean
    status?: boolean
    attempts?: boolean
    maxAttempts?: boolean
    lastError?: boolean
    scheduledAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $SyncJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SyncJob"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      status: $Enums.JobStatus
      attempts: number
      maxAttempts: number
      lastError: string | null
      scheduledAt: Date
      startedAt: Date | null
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["syncJob"]>
    composites: {}
  }

  type SyncJobGetPayload<S extends boolean | null | undefined | SyncJobDefaultArgs> = $Result.GetResult<Prisma.$SyncJobPayload, S>

  type SyncJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SyncJobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SyncJobCountAggregateInputType | true
    }

  export interface SyncJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SyncJob'], meta: { name: 'SyncJob' } }
    /**
     * Find zero or one SyncJob that matches the filter.
     * @param {SyncJobFindUniqueArgs} args - Arguments to find a SyncJob
     * @example
     * // Get one SyncJob
     * const syncJob = await prisma.syncJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SyncJobFindUniqueArgs>(args: SelectSubset<T, SyncJobFindUniqueArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SyncJob that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SyncJobFindUniqueOrThrowArgs} args - Arguments to find a SyncJob
     * @example
     * // Get one SyncJob
     * const syncJob = await prisma.syncJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SyncJobFindUniqueOrThrowArgs>(args: SelectSubset<T, SyncJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SyncJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobFindFirstArgs} args - Arguments to find a SyncJob
     * @example
     * // Get one SyncJob
     * const syncJob = await prisma.syncJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SyncJobFindFirstArgs>(args?: SelectSubset<T, SyncJobFindFirstArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SyncJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobFindFirstOrThrowArgs} args - Arguments to find a SyncJob
     * @example
     * // Get one SyncJob
     * const syncJob = await prisma.syncJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SyncJobFindFirstOrThrowArgs>(args?: SelectSubset<T, SyncJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SyncJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SyncJobs
     * const syncJobs = await prisma.syncJob.findMany()
     * 
     * // Get first 10 SyncJobs
     * const syncJobs = await prisma.syncJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const syncJobWithIdOnly = await prisma.syncJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SyncJobFindManyArgs>(args?: SelectSubset<T, SyncJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SyncJob.
     * @param {SyncJobCreateArgs} args - Arguments to create a SyncJob.
     * @example
     * // Create one SyncJob
     * const SyncJob = await prisma.syncJob.create({
     *   data: {
     *     // ... data to create a SyncJob
     *   }
     * })
     * 
     */
    create<T extends SyncJobCreateArgs>(args: SelectSubset<T, SyncJobCreateArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SyncJobs.
     * @param {SyncJobCreateManyArgs} args - Arguments to create many SyncJobs.
     * @example
     * // Create many SyncJobs
     * const syncJob = await prisma.syncJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SyncJobCreateManyArgs>(args?: SelectSubset<T, SyncJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SyncJobs and returns the data saved in the database.
     * @param {SyncJobCreateManyAndReturnArgs} args - Arguments to create many SyncJobs.
     * @example
     * // Create many SyncJobs
     * const syncJob = await prisma.syncJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SyncJobs and only return the `id`
     * const syncJobWithIdOnly = await prisma.syncJob.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SyncJobCreateManyAndReturnArgs>(args?: SelectSubset<T, SyncJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SyncJob.
     * @param {SyncJobDeleteArgs} args - Arguments to delete one SyncJob.
     * @example
     * // Delete one SyncJob
     * const SyncJob = await prisma.syncJob.delete({
     *   where: {
     *     // ... filter to delete one SyncJob
     *   }
     * })
     * 
     */
    delete<T extends SyncJobDeleteArgs>(args: SelectSubset<T, SyncJobDeleteArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SyncJob.
     * @param {SyncJobUpdateArgs} args - Arguments to update one SyncJob.
     * @example
     * // Update one SyncJob
     * const syncJob = await prisma.syncJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SyncJobUpdateArgs>(args: SelectSubset<T, SyncJobUpdateArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SyncJobs.
     * @param {SyncJobDeleteManyArgs} args - Arguments to filter SyncJobs to delete.
     * @example
     * // Delete a few SyncJobs
     * const { count } = await prisma.syncJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SyncJobDeleteManyArgs>(args?: SelectSubset<T, SyncJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SyncJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SyncJobs
     * const syncJob = await prisma.syncJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SyncJobUpdateManyArgs>(args: SelectSubset<T, SyncJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SyncJob.
     * @param {SyncJobUpsertArgs} args - Arguments to update or create a SyncJob.
     * @example
     * // Update or create a SyncJob
     * const syncJob = await prisma.syncJob.upsert({
     *   create: {
     *     // ... data to create a SyncJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SyncJob we want to update
     *   }
     * })
     */
    upsert<T extends SyncJobUpsertArgs>(args: SelectSubset<T, SyncJobUpsertArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SyncJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobCountArgs} args - Arguments to filter SyncJobs to count.
     * @example
     * // Count the number of SyncJobs
     * const count = await prisma.syncJob.count({
     *   where: {
     *     // ... the filter for the SyncJobs we want to count
     *   }
     * })
    **/
    count<T extends SyncJobCountArgs>(
      args?: Subset<T, SyncJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SyncJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SyncJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SyncJobAggregateArgs>(args: Subset<T, SyncJobAggregateArgs>): Prisma.PrismaPromise<GetSyncJobAggregateType<T>>

    /**
     * Group by SyncJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SyncJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SyncJobGroupByArgs['orderBy'] }
        : { orderBy?: SyncJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SyncJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSyncJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SyncJob model
   */
  readonly fields: SyncJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SyncJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SyncJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SyncJob model
   */ 
  interface SyncJobFieldRefs {
    readonly id: FieldRef<"SyncJob", 'String'>
    readonly eventId: FieldRef<"SyncJob", 'String'>
    readonly status: FieldRef<"SyncJob", 'JobStatus'>
    readonly attempts: FieldRef<"SyncJob", 'Int'>
    readonly maxAttempts: FieldRef<"SyncJob", 'Int'>
    readonly lastError: FieldRef<"SyncJob", 'String'>
    readonly scheduledAt: FieldRef<"SyncJob", 'DateTime'>
    readonly startedAt: FieldRef<"SyncJob", 'DateTime'>
    readonly completedAt: FieldRef<"SyncJob", 'DateTime'>
    readonly createdAt: FieldRef<"SyncJob", 'DateTime'>
    readonly updatedAt: FieldRef<"SyncJob", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SyncJob findUnique
   */
  export type SyncJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Filter, which SyncJob to fetch.
     */
    where: SyncJobWhereUniqueInput
  }

  /**
   * SyncJob findUniqueOrThrow
   */
  export type SyncJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Filter, which SyncJob to fetch.
     */
    where: SyncJobWhereUniqueInput
  }

  /**
   * SyncJob findFirst
   */
  export type SyncJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Filter, which SyncJob to fetch.
     */
    where?: SyncJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncJobs to fetch.
     */
    orderBy?: SyncJobOrderByWithRelationInput | SyncJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SyncJobs.
     */
    cursor?: SyncJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SyncJobs.
     */
    distinct?: SyncJobScalarFieldEnum | SyncJobScalarFieldEnum[]
  }

  /**
   * SyncJob findFirstOrThrow
   */
  export type SyncJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Filter, which SyncJob to fetch.
     */
    where?: SyncJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncJobs to fetch.
     */
    orderBy?: SyncJobOrderByWithRelationInput | SyncJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SyncJobs.
     */
    cursor?: SyncJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SyncJobs.
     */
    distinct?: SyncJobScalarFieldEnum | SyncJobScalarFieldEnum[]
  }

  /**
   * SyncJob findMany
   */
  export type SyncJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Filter, which SyncJobs to fetch.
     */
    where?: SyncJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncJobs to fetch.
     */
    orderBy?: SyncJobOrderByWithRelationInput | SyncJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SyncJobs.
     */
    cursor?: SyncJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncJobs.
     */
    skip?: number
    distinct?: SyncJobScalarFieldEnum | SyncJobScalarFieldEnum[]
  }

  /**
   * SyncJob create
   */
  export type SyncJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * The data needed to create a SyncJob.
     */
    data: XOR<SyncJobCreateInput, SyncJobUncheckedCreateInput>
  }

  /**
   * SyncJob createMany
   */
  export type SyncJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SyncJobs.
     */
    data: SyncJobCreateManyInput | SyncJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SyncJob createManyAndReturn
   */
  export type SyncJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SyncJobs.
     */
    data: SyncJobCreateManyInput | SyncJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SyncJob update
   */
  export type SyncJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * The data needed to update a SyncJob.
     */
    data: XOR<SyncJobUpdateInput, SyncJobUncheckedUpdateInput>
    /**
     * Choose, which SyncJob to update.
     */
    where: SyncJobWhereUniqueInput
  }

  /**
   * SyncJob updateMany
   */
  export type SyncJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SyncJobs.
     */
    data: XOR<SyncJobUpdateManyMutationInput, SyncJobUncheckedUpdateManyInput>
    /**
     * Filter which SyncJobs to update
     */
    where?: SyncJobWhereInput
  }

  /**
   * SyncJob upsert
   */
  export type SyncJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * The filter to search for the SyncJob to update in case it exists.
     */
    where: SyncJobWhereUniqueInput
    /**
     * In case the SyncJob found by the `where` argument doesn't exist, create a new SyncJob with this data.
     */
    create: XOR<SyncJobCreateInput, SyncJobUncheckedCreateInput>
    /**
     * In case the SyncJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SyncJobUpdateInput, SyncJobUncheckedUpdateInput>
  }

  /**
   * SyncJob delete
   */
  export type SyncJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Filter which SyncJob to delete.
     */
    where: SyncJobWhereUniqueInput
  }

  /**
   * SyncJob deleteMany
   */
  export type SyncJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SyncJobs to delete
     */
    where?: SyncJobWhereInput
  }

  /**
   * SyncJob without action
   */
  export type SyncJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    farmerId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    farmerId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    action: number
    entityType: number
    entityId: number
    farmerId: number
    changes: number
    metadata: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    farmerId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    farmerId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    farmerId?: true
    changes?: true
    metadata?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    action: string
    entityType: string
    entityId: string
    farmerId: string | null
    changes: JsonValue | null
    metadata: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    farmerId?: boolean
    changes?: boolean
    metadata?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    farmerId?: boolean
    changes?: boolean
    metadata?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    farmerId?: boolean
    changes?: boolean
    metadata?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }


  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: string
      entityType: string
      entityId: string
      farmerId: string | null
      changes: Prisma.JsonValue | null
      metadata: Prisma.JsonValue | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entityType: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly farmerId: FieldRef<"AuditLog", 'String'>
    readonly changes: FieldRef<"AuditLog", 'Json'>
    readonly metadata: FieldRef<"AuditLog", 'Json'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FarmerScalarFieldEnum: {
    id: 'id',
    phone: 'phone',
    name: 'name',
    village: 'village',
    district: 'district',
    state: 'state',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FarmerScalarFieldEnum = (typeof FarmerScalarFieldEnum)[keyof typeof FarmerScalarFieldEnum]


  export const CollectionEventScalarFieldEnum: {
    id: 'id',
    farmerId: 'farmerId',
    species: 'species',
    latitude: 'latitude',
    longitude: 'longitude',
    accuracy: 'accuracy',
    altitude: 'altitude',
    timestamp: 'timestamp',
    moisturePct: 'moisturePct',
    notes: 'notes',
    photoHash: 'photoHash',
    photoUrl: 'photoUrl',
    status: 'status',
    txId: 'txId',
    blockHash: 'blockHash',
    lastError: 'lastError',
    retryCount: 'retryCount',
    maxRetries: 'maxRetries',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    syncedAt: 'syncedAt',
    isValidLocation: 'isValidLocation',
    isValidSeason: 'isValidSeason',
    qualityScore: 'qualityScore',
    source: 'source',
    deviceInfo: 'deviceInfo',
    appVersion: 'appVersion'
  };

  export type CollectionEventScalarFieldEnum = (typeof CollectionEventScalarFieldEnum)[keyof typeof CollectionEventScalarFieldEnum]


  export const OtpRequestScalarFieldEnum: {
    id: 'id',
    farmerId: 'farmerId',
    phone: 'phone',
    otp: 'otp',
    isUsed: 'isUsed',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    usedAt: 'usedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent'
  };

  export type OtpRequestScalarFieldEnum = (typeof OtpRequestScalarFieldEnum)[keyof typeof OtpRequestScalarFieldEnum]


  export const SyncJobScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    status: 'status',
    attempts: 'attempts',
    maxAttempts: 'maxAttempts',
    lastError: 'lastError',
    scheduledAt: 'scheduledAt',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SyncJobScalarFieldEnum = (typeof SyncJobScalarFieldEnum)[keyof typeof SyncJobScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    action: 'action',
    entityType: 'entityType',
    entityId: 'entityId',
    farmerId: 'farmerId',
    changes: 'changes',
    metadata: 'metadata',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'EventStatus'
   */
  export type EnumEventStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventStatus'>
    


  /**
   * Reference to a field of type 'EventStatus[]'
   */
  export type ListEnumEventStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'EventSource'
   */
  export type EnumEventSourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventSource'>
    


  /**
   * Reference to a field of type 'EventSource[]'
   */
  export type ListEnumEventSourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventSource[]'>
    


  /**
   * Reference to a field of type 'JobStatus'
   */
  export type EnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus'>
    


  /**
   * Reference to a field of type 'JobStatus[]'
   */
  export type ListEnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type FarmerWhereInput = {
    AND?: FarmerWhereInput | FarmerWhereInput[]
    OR?: FarmerWhereInput[]
    NOT?: FarmerWhereInput | FarmerWhereInput[]
    id?: StringFilter<"Farmer"> | string
    phone?: StringFilter<"Farmer"> | string
    name?: StringNullableFilter<"Farmer"> | string | null
    village?: StringNullableFilter<"Farmer"> | string | null
    district?: StringNullableFilter<"Farmer"> | string | null
    state?: StringNullableFilter<"Farmer"> | string | null
    isActive?: BoolFilter<"Farmer"> | boolean
    createdAt?: DateTimeFilter<"Farmer"> | Date | string
    updatedAt?: DateTimeFilter<"Farmer"> | Date | string
    events?: CollectionEventListRelationFilter
    otpRequests?: OtpRequestListRelationFilter
  }

  export type FarmerOrderByWithRelationInput = {
    id?: SortOrder
    phone?: SortOrder
    name?: SortOrderInput | SortOrder
    village?: SortOrderInput | SortOrder
    district?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    events?: CollectionEventOrderByRelationAggregateInput
    otpRequests?: OtpRequestOrderByRelationAggregateInput
  }

  export type FarmerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    phone?: string
    AND?: FarmerWhereInput | FarmerWhereInput[]
    OR?: FarmerWhereInput[]
    NOT?: FarmerWhereInput | FarmerWhereInput[]
    name?: StringNullableFilter<"Farmer"> | string | null
    village?: StringNullableFilter<"Farmer"> | string | null
    district?: StringNullableFilter<"Farmer"> | string | null
    state?: StringNullableFilter<"Farmer"> | string | null
    isActive?: BoolFilter<"Farmer"> | boolean
    createdAt?: DateTimeFilter<"Farmer"> | Date | string
    updatedAt?: DateTimeFilter<"Farmer"> | Date | string
    events?: CollectionEventListRelationFilter
    otpRequests?: OtpRequestListRelationFilter
  }, "id" | "phone">

  export type FarmerOrderByWithAggregationInput = {
    id?: SortOrder
    phone?: SortOrder
    name?: SortOrderInput | SortOrder
    village?: SortOrderInput | SortOrder
    district?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FarmerCountOrderByAggregateInput
    _max?: FarmerMaxOrderByAggregateInput
    _min?: FarmerMinOrderByAggregateInput
  }

  export type FarmerScalarWhereWithAggregatesInput = {
    AND?: FarmerScalarWhereWithAggregatesInput | FarmerScalarWhereWithAggregatesInput[]
    OR?: FarmerScalarWhereWithAggregatesInput[]
    NOT?: FarmerScalarWhereWithAggregatesInput | FarmerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Farmer"> | string
    phone?: StringWithAggregatesFilter<"Farmer"> | string
    name?: StringNullableWithAggregatesFilter<"Farmer"> | string | null
    village?: StringNullableWithAggregatesFilter<"Farmer"> | string | null
    district?: StringNullableWithAggregatesFilter<"Farmer"> | string | null
    state?: StringNullableWithAggregatesFilter<"Farmer"> | string | null
    isActive?: BoolWithAggregatesFilter<"Farmer"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Farmer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Farmer"> | Date | string
  }

  export type CollectionEventWhereInput = {
    AND?: CollectionEventWhereInput | CollectionEventWhereInput[]
    OR?: CollectionEventWhereInput[]
    NOT?: CollectionEventWhereInput | CollectionEventWhereInput[]
    id?: StringFilter<"CollectionEvent"> | string
    farmerId?: StringFilter<"CollectionEvent"> | string
    species?: StringFilter<"CollectionEvent"> | string
    latitude?: FloatFilter<"CollectionEvent"> | number
    longitude?: FloatFilter<"CollectionEvent"> | number
    accuracy?: FloatNullableFilter<"CollectionEvent"> | number | null
    altitude?: FloatNullableFilter<"CollectionEvent"> | number | null
    timestamp?: DateTimeFilter<"CollectionEvent"> | Date | string
    moisturePct?: FloatNullableFilter<"CollectionEvent"> | number | null
    notes?: StringNullableFilter<"CollectionEvent"> | string | null
    photoHash?: StringNullableFilter<"CollectionEvent"> | string | null
    photoUrl?: StringNullableFilter<"CollectionEvent"> | string | null
    status?: EnumEventStatusFilter<"CollectionEvent"> | $Enums.EventStatus
    txId?: StringNullableFilter<"CollectionEvent"> | string | null
    blockHash?: StringNullableFilter<"CollectionEvent"> | string | null
    lastError?: StringNullableFilter<"CollectionEvent"> | string | null
    retryCount?: IntFilter<"CollectionEvent"> | number
    maxRetries?: IntFilter<"CollectionEvent"> | number
    createdAt?: DateTimeFilter<"CollectionEvent"> | Date | string
    updatedAt?: DateTimeFilter<"CollectionEvent"> | Date | string
    syncedAt?: DateTimeNullableFilter<"CollectionEvent"> | Date | string | null
    isValidLocation?: BoolFilter<"CollectionEvent"> | boolean
    isValidSeason?: BoolFilter<"CollectionEvent"> | boolean
    qualityScore?: FloatNullableFilter<"CollectionEvent"> | number | null
    source?: EnumEventSourceFilter<"CollectionEvent"> | $Enums.EventSource
    deviceInfo?: StringNullableFilter<"CollectionEvent"> | string | null
    appVersion?: StringNullableFilter<"CollectionEvent"> | string | null
    farmer?: XOR<FarmerRelationFilter, FarmerWhereInput>
  }

  export type CollectionEventOrderByWithRelationInput = {
    id?: SortOrder
    farmerId?: SortOrder
    species?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    accuracy?: SortOrderInput | SortOrder
    altitude?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    moisturePct?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    photoHash?: SortOrderInput | SortOrder
    photoUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    txId?: SortOrderInput | SortOrder
    blockHash?: SortOrderInput | SortOrder
    lastError?: SortOrderInput | SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isValidLocation?: SortOrder
    isValidSeason?: SortOrder
    qualityScore?: SortOrderInput | SortOrder
    source?: SortOrder
    deviceInfo?: SortOrderInput | SortOrder
    appVersion?: SortOrderInput | SortOrder
    farmer?: FarmerOrderByWithRelationInput
  }

  export type CollectionEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CollectionEventWhereInput | CollectionEventWhereInput[]
    OR?: CollectionEventWhereInput[]
    NOT?: CollectionEventWhereInput | CollectionEventWhereInput[]
    farmerId?: StringFilter<"CollectionEvent"> | string
    species?: StringFilter<"CollectionEvent"> | string
    latitude?: FloatFilter<"CollectionEvent"> | number
    longitude?: FloatFilter<"CollectionEvent"> | number
    accuracy?: FloatNullableFilter<"CollectionEvent"> | number | null
    altitude?: FloatNullableFilter<"CollectionEvent"> | number | null
    timestamp?: DateTimeFilter<"CollectionEvent"> | Date | string
    moisturePct?: FloatNullableFilter<"CollectionEvent"> | number | null
    notes?: StringNullableFilter<"CollectionEvent"> | string | null
    photoHash?: StringNullableFilter<"CollectionEvent"> | string | null
    photoUrl?: StringNullableFilter<"CollectionEvent"> | string | null
    status?: EnumEventStatusFilter<"CollectionEvent"> | $Enums.EventStatus
    txId?: StringNullableFilter<"CollectionEvent"> | string | null
    blockHash?: StringNullableFilter<"CollectionEvent"> | string | null
    lastError?: StringNullableFilter<"CollectionEvent"> | string | null
    retryCount?: IntFilter<"CollectionEvent"> | number
    maxRetries?: IntFilter<"CollectionEvent"> | number
    createdAt?: DateTimeFilter<"CollectionEvent"> | Date | string
    updatedAt?: DateTimeFilter<"CollectionEvent"> | Date | string
    syncedAt?: DateTimeNullableFilter<"CollectionEvent"> | Date | string | null
    isValidLocation?: BoolFilter<"CollectionEvent"> | boolean
    isValidSeason?: BoolFilter<"CollectionEvent"> | boolean
    qualityScore?: FloatNullableFilter<"CollectionEvent"> | number | null
    source?: EnumEventSourceFilter<"CollectionEvent"> | $Enums.EventSource
    deviceInfo?: StringNullableFilter<"CollectionEvent"> | string | null
    appVersion?: StringNullableFilter<"CollectionEvent"> | string | null
    farmer?: XOR<FarmerRelationFilter, FarmerWhereInput>
  }, "id">

  export type CollectionEventOrderByWithAggregationInput = {
    id?: SortOrder
    farmerId?: SortOrder
    species?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    accuracy?: SortOrderInput | SortOrder
    altitude?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    moisturePct?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    photoHash?: SortOrderInput | SortOrder
    photoUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    txId?: SortOrderInput | SortOrder
    blockHash?: SortOrderInput | SortOrder
    lastError?: SortOrderInput | SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isValidLocation?: SortOrder
    isValidSeason?: SortOrder
    qualityScore?: SortOrderInput | SortOrder
    source?: SortOrder
    deviceInfo?: SortOrderInput | SortOrder
    appVersion?: SortOrderInput | SortOrder
    _count?: CollectionEventCountOrderByAggregateInput
    _avg?: CollectionEventAvgOrderByAggregateInput
    _max?: CollectionEventMaxOrderByAggregateInput
    _min?: CollectionEventMinOrderByAggregateInput
    _sum?: CollectionEventSumOrderByAggregateInput
  }

  export type CollectionEventScalarWhereWithAggregatesInput = {
    AND?: CollectionEventScalarWhereWithAggregatesInput | CollectionEventScalarWhereWithAggregatesInput[]
    OR?: CollectionEventScalarWhereWithAggregatesInput[]
    NOT?: CollectionEventScalarWhereWithAggregatesInput | CollectionEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CollectionEvent"> | string
    farmerId?: StringWithAggregatesFilter<"CollectionEvent"> | string
    species?: StringWithAggregatesFilter<"CollectionEvent"> | string
    latitude?: FloatWithAggregatesFilter<"CollectionEvent"> | number
    longitude?: FloatWithAggregatesFilter<"CollectionEvent"> | number
    accuracy?: FloatNullableWithAggregatesFilter<"CollectionEvent"> | number | null
    altitude?: FloatNullableWithAggregatesFilter<"CollectionEvent"> | number | null
    timestamp?: DateTimeWithAggregatesFilter<"CollectionEvent"> | Date | string
    moisturePct?: FloatNullableWithAggregatesFilter<"CollectionEvent"> | number | null
    notes?: StringNullableWithAggregatesFilter<"CollectionEvent"> | string | null
    photoHash?: StringNullableWithAggregatesFilter<"CollectionEvent"> | string | null
    photoUrl?: StringNullableWithAggregatesFilter<"CollectionEvent"> | string | null
    status?: EnumEventStatusWithAggregatesFilter<"CollectionEvent"> | $Enums.EventStatus
    txId?: StringNullableWithAggregatesFilter<"CollectionEvent"> | string | null
    blockHash?: StringNullableWithAggregatesFilter<"CollectionEvent"> | string | null
    lastError?: StringNullableWithAggregatesFilter<"CollectionEvent"> | string | null
    retryCount?: IntWithAggregatesFilter<"CollectionEvent"> | number
    maxRetries?: IntWithAggregatesFilter<"CollectionEvent"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CollectionEvent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CollectionEvent"> | Date | string
    syncedAt?: DateTimeNullableWithAggregatesFilter<"CollectionEvent"> | Date | string | null
    isValidLocation?: BoolWithAggregatesFilter<"CollectionEvent"> | boolean
    isValidSeason?: BoolWithAggregatesFilter<"CollectionEvent"> | boolean
    qualityScore?: FloatNullableWithAggregatesFilter<"CollectionEvent"> | number | null
    source?: EnumEventSourceWithAggregatesFilter<"CollectionEvent"> | $Enums.EventSource
    deviceInfo?: StringNullableWithAggregatesFilter<"CollectionEvent"> | string | null
    appVersion?: StringNullableWithAggregatesFilter<"CollectionEvent"> | string | null
  }

  export type OtpRequestWhereInput = {
    AND?: OtpRequestWhereInput | OtpRequestWhereInput[]
    OR?: OtpRequestWhereInput[]
    NOT?: OtpRequestWhereInput | OtpRequestWhereInput[]
    id?: StringFilter<"OtpRequest"> | string
    farmerId?: StringNullableFilter<"OtpRequest"> | string | null
    phone?: StringFilter<"OtpRequest"> | string
    otp?: StringFilter<"OtpRequest"> | string
    isUsed?: BoolFilter<"OtpRequest"> | boolean
    expiresAt?: DateTimeFilter<"OtpRequest"> | Date | string
    createdAt?: DateTimeFilter<"OtpRequest"> | Date | string
    usedAt?: DateTimeNullableFilter<"OtpRequest"> | Date | string | null
    ipAddress?: StringNullableFilter<"OtpRequest"> | string | null
    userAgent?: StringNullableFilter<"OtpRequest"> | string | null
    farmer?: XOR<FarmerNullableRelationFilter, FarmerWhereInput> | null
  }

  export type OtpRequestOrderByWithRelationInput = {
    id?: SortOrder
    farmerId?: SortOrderInput | SortOrder
    phone?: SortOrder
    otp?: SortOrder
    isUsed?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    farmer?: FarmerOrderByWithRelationInput
  }

  export type OtpRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OtpRequestWhereInput | OtpRequestWhereInput[]
    OR?: OtpRequestWhereInput[]
    NOT?: OtpRequestWhereInput | OtpRequestWhereInput[]
    farmerId?: StringNullableFilter<"OtpRequest"> | string | null
    phone?: StringFilter<"OtpRequest"> | string
    otp?: StringFilter<"OtpRequest"> | string
    isUsed?: BoolFilter<"OtpRequest"> | boolean
    expiresAt?: DateTimeFilter<"OtpRequest"> | Date | string
    createdAt?: DateTimeFilter<"OtpRequest"> | Date | string
    usedAt?: DateTimeNullableFilter<"OtpRequest"> | Date | string | null
    ipAddress?: StringNullableFilter<"OtpRequest"> | string | null
    userAgent?: StringNullableFilter<"OtpRequest"> | string | null
    farmer?: XOR<FarmerNullableRelationFilter, FarmerWhereInput> | null
  }, "id">

  export type OtpRequestOrderByWithAggregationInput = {
    id?: SortOrder
    farmerId?: SortOrderInput | SortOrder
    phone?: SortOrder
    otp?: SortOrder
    isUsed?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    _count?: OtpRequestCountOrderByAggregateInput
    _max?: OtpRequestMaxOrderByAggregateInput
    _min?: OtpRequestMinOrderByAggregateInput
  }

  export type OtpRequestScalarWhereWithAggregatesInput = {
    AND?: OtpRequestScalarWhereWithAggregatesInput | OtpRequestScalarWhereWithAggregatesInput[]
    OR?: OtpRequestScalarWhereWithAggregatesInput[]
    NOT?: OtpRequestScalarWhereWithAggregatesInput | OtpRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OtpRequest"> | string
    farmerId?: StringNullableWithAggregatesFilter<"OtpRequest"> | string | null
    phone?: StringWithAggregatesFilter<"OtpRequest"> | string
    otp?: StringWithAggregatesFilter<"OtpRequest"> | string
    isUsed?: BoolWithAggregatesFilter<"OtpRequest"> | boolean
    expiresAt?: DateTimeWithAggregatesFilter<"OtpRequest"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"OtpRequest"> | Date | string
    usedAt?: DateTimeNullableWithAggregatesFilter<"OtpRequest"> | Date | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"OtpRequest"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"OtpRequest"> | string | null
  }

  export type SyncJobWhereInput = {
    AND?: SyncJobWhereInput | SyncJobWhereInput[]
    OR?: SyncJobWhereInput[]
    NOT?: SyncJobWhereInput | SyncJobWhereInput[]
    id?: StringFilter<"SyncJob"> | string
    eventId?: StringFilter<"SyncJob"> | string
    status?: EnumJobStatusFilter<"SyncJob"> | $Enums.JobStatus
    attempts?: IntFilter<"SyncJob"> | number
    maxAttempts?: IntFilter<"SyncJob"> | number
    lastError?: StringNullableFilter<"SyncJob"> | string | null
    scheduledAt?: DateTimeFilter<"SyncJob"> | Date | string
    startedAt?: DateTimeNullableFilter<"SyncJob"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"SyncJob"> | Date | string | null
    createdAt?: DateTimeFilter<"SyncJob"> | Date | string
    updatedAt?: DateTimeFilter<"SyncJob"> | Date | string
  }

  export type SyncJobOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    status?: SortOrder
    attempts?: SortOrder
    maxAttempts?: SortOrder
    lastError?: SortOrderInput | SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SyncJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    eventId?: string
    AND?: SyncJobWhereInput | SyncJobWhereInput[]
    OR?: SyncJobWhereInput[]
    NOT?: SyncJobWhereInput | SyncJobWhereInput[]
    status?: EnumJobStatusFilter<"SyncJob"> | $Enums.JobStatus
    attempts?: IntFilter<"SyncJob"> | number
    maxAttempts?: IntFilter<"SyncJob"> | number
    lastError?: StringNullableFilter<"SyncJob"> | string | null
    scheduledAt?: DateTimeFilter<"SyncJob"> | Date | string
    startedAt?: DateTimeNullableFilter<"SyncJob"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"SyncJob"> | Date | string | null
    createdAt?: DateTimeFilter<"SyncJob"> | Date | string
    updatedAt?: DateTimeFilter<"SyncJob"> | Date | string
  }, "id" | "eventId">

  export type SyncJobOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    status?: SortOrder
    attempts?: SortOrder
    maxAttempts?: SortOrder
    lastError?: SortOrderInput | SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SyncJobCountOrderByAggregateInput
    _avg?: SyncJobAvgOrderByAggregateInput
    _max?: SyncJobMaxOrderByAggregateInput
    _min?: SyncJobMinOrderByAggregateInput
    _sum?: SyncJobSumOrderByAggregateInput
  }

  export type SyncJobScalarWhereWithAggregatesInput = {
    AND?: SyncJobScalarWhereWithAggregatesInput | SyncJobScalarWhereWithAggregatesInput[]
    OR?: SyncJobScalarWhereWithAggregatesInput[]
    NOT?: SyncJobScalarWhereWithAggregatesInput | SyncJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SyncJob"> | string
    eventId?: StringWithAggregatesFilter<"SyncJob"> | string
    status?: EnumJobStatusWithAggregatesFilter<"SyncJob"> | $Enums.JobStatus
    attempts?: IntWithAggregatesFilter<"SyncJob"> | number
    maxAttempts?: IntWithAggregatesFilter<"SyncJob"> | number
    lastError?: StringNullableWithAggregatesFilter<"SyncJob"> | string | null
    scheduledAt?: DateTimeWithAggregatesFilter<"SyncJob"> | Date | string
    startedAt?: DateTimeNullableWithAggregatesFilter<"SyncJob"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"SyncJob"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SyncJob"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SyncJob"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    entityType?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    farmerId?: StringNullableFilter<"AuditLog"> | string | null
    changes?: JsonNullableFilter<"AuditLog">
    metadata?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    farmerId?: SortOrderInput | SortOrder
    changes?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    action?: StringFilter<"AuditLog"> | string
    entityType?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    farmerId?: StringNullableFilter<"AuditLog"> | string | null
    changes?: JsonNullableFilter<"AuditLog">
    metadata?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    farmerId?: SortOrderInput | SortOrder
    changes?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entityType?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: StringWithAggregatesFilter<"AuditLog"> | string
    farmerId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    changes?: JsonNullableWithAggregatesFilter<"AuditLog">
    metadata?: JsonNullableWithAggregatesFilter<"AuditLog">
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type FarmerCreateInput = {
    id?: string
    phone: string
    name?: string | null
    village?: string | null
    district?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: CollectionEventCreateNestedManyWithoutFarmerInput
    otpRequests?: OtpRequestCreateNestedManyWithoutFarmerInput
  }

  export type FarmerUncheckedCreateInput = {
    id?: string
    phone: string
    name?: string | null
    village?: string | null
    district?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: CollectionEventUncheckedCreateNestedManyWithoutFarmerInput
    otpRequests?: OtpRequestUncheckedCreateNestedManyWithoutFarmerInput
  }

  export type FarmerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    village?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: CollectionEventUpdateManyWithoutFarmerNestedInput
    otpRequests?: OtpRequestUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    village?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: CollectionEventUncheckedUpdateManyWithoutFarmerNestedInput
    otpRequests?: OtpRequestUncheckedUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerCreateManyInput = {
    id?: string
    phone: string
    name?: string | null
    village?: string | null
    district?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FarmerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    village?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FarmerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    village?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionEventCreateInput = {
    id?: string
    species: string
    latitude: number
    longitude: number
    accuracy?: number | null
    altitude?: number | null
    timestamp: Date | string
    moisturePct?: number | null
    notes?: string | null
    photoHash?: string | null
    photoUrl?: string | null
    status?: $Enums.EventStatus
    txId?: string | null
    blockHash?: string | null
    lastError?: string | null
    retryCount?: number
    maxRetries?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    syncedAt?: Date | string | null
    isValidLocation?: boolean
    isValidSeason?: boolean
    qualityScore?: number | null
    source?: $Enums.EventSource
    deviceInfo?: string | null
    appVersion?: string | null
    farmer: FarmerCreateNestedOneWithoutEventsInput
  }

  export type CollectionEventUncheckedCreateInput = {
    id?: string
    farmerId: string
    species: string
    latitude: number
    longitude: number
    accuracy?: number | null
    altitude?: number | null
    timestamp: Date | string
    moisturePct?: number | null
    notes?: string | null
    photoHash?: string | null
    photoUrl?: string | null
    status?: $Enums.EventStatus
    txId?: string | null
    blockHash?: string | null
    lastError?: string | null
    retryCount?: number
    maxRetries?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    syncedAt?: Date | string | null
    isValidLocation?: boolean
    isValidSeason?: boolean
    qualityScore?: number | null
    source?: $Enums.EventSource
    deviceInfo?: string | null
    appVersion?: string | null
  }

  export type CollectionEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    altitude?: NullableFloatFieldUpdateOperationsInput | number | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    moisturePct?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    photoHash?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    txId?: NullableStringFieldUpdateOperationsInput | string | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isValidLocation?: BoolFieldUpdateOperationsInput | boolean
    isValidSeason?: BoolFieldUpdateOperationsInput | boolean
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    source?: EnumEventSourceFieldUpdateOperationsInput | $Enums.EventSource
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    appVersion?: NullableStringFieldUpdateOperationsInput | string | null
    farmer?: FarmerUpdateOneRequiredWithoutEventsNestedInput
  }

  export type CollectionEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    farmerId?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    altitude?: NullableFloatFieldUpdateOperationsInput | number | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    moisturePct?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    photoHash?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    txId?: NullableStringFieldUpdateOperationsInput | string | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isValidLocation?: BoolFieldUpdateOperationsInput | boolean
    isValidSeason?: BoolFieldUpdateOperationsInput | boolean
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    source?: EnumEventSourceFieldUpdateOperationsInput | $Enums.EventSource
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    appVersion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CollectionEventCreateManyInput = {
    id?: string
    farmerId: string
    species: string
    latitude: number
    longitude: number
    accuracy?: number | null
    altitude?: number | null
    timestamp: Date | string
    moisturePct?: number | null
    notes?: string | null
    photoHash?: string | null
    photoUrl?: string | null
    status?: $Enums.EventStatus
    txId?: string | null
    blockHash?: string | null
    lastError?: string | null
    retryCount?: number
    maxRetries?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    syncedAt?: Date | string | null
    isValidLocation?: boolean
    isValidSeason?: boolean
    qualityScore?: number | null
    source?: $Enums.EventSource
    deviceInfo?: string | null
    appVersion?: string | null
  }

  export type CollectionEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    altitude?: NullableFloatFieldUpdateOperationsInput | number | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    moisturePct?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    photoHash?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    txId?: NullableStringFieldUpdateOperationsInput | string | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isValidLocation?: BoolFieldUpdateOperationsInput | boolean
    isValidSeason?: BoolFieldUpdateOperationsInput | boolean
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    source?: EnumEventSourceFieldUpdateOperationsInput | $Enums.EventSource
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    appVersion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CollectionEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    farmerId?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    altitude?: NullableFloatFieldUpdateOperationsInput | number | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    moisturePct?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    photoHash?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    txId?: NullableStringFieldUpdateOperationsInput | string | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isValidLocation?: BoolFieldUpdateOperationsInput | boolean
    isValidSeason?: BoolFieldUpdateOperationsInput | boolean
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    source?: EnumEventSourceFieldUpdateOperationsInput | $Enums.EventSource
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    appVersion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OtpRequestCreateInput = {
    id?: string
    phone: string
    otp: string
    isUsed?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    usedAt?: Date | string | null
    ipAddress?: string | null
    userAgent?: string | null
    farmer?: FarmerCreateNestedOneWithoutOtpRequestsInput
  }

  export type OtpRequestUncheckedCreateInput = {
    id?: string
    farmerId?: string | null
    phone: string
    otp: string
    isUsed?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    usedAt?: Date | string | null
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type OtpRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    farmer?: FarmerUpdateOneWithoutOtpRequestsNestedInput
  }

  export type OtpRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    farmerId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OtpRequestCreateManyInput = {
    id?: string
    farmerId?: string | null
    phone: string
    otp: string
    isUsed?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    usedAt?: Date | string | null
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type OtpRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OtpRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    farmerId?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SyncJobCreateInput = {
    id?: string
    eventId: string
    status?: $Enums.JobStatus
    attempts?: number
    maxAttempts?: number
    lastError?: string | null
    scheduledAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SyncJobUncheckedCreateInput = {
    id?: string
    eventId: string
    status?: $Enums.JobStatus
    attempts?: number
    maxAttempts?: number
    lastError?: string | null
    scheduledAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SyncJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    attempts?: IntFieldUpdateOperationsInput | number
    maxAttempts?: IntFieldUpdateOperationsInput | number
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    attempts?: IntFieldUpdateOperationsInput | number
    maxAttempts?: IntFieldUpdateOperationsInput | number
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncJobCreateManyInput = {
    id?: string
    eventId: string
    status?: $Enums.JobStatus
    attempts?: number
    maxAttempts?: number
    lastError?: string | null
    scheduledAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SyncJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    attempts?: IntFieldUpdateOperationsInput | number
    maxAttempts?: IntFieldUpdateOperationsInput | number
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    attempts?: IntFieldUpdateOperationsInput | number
    maxAttempts?: IntFieldUpdateOperationsInput | number
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    entityType: string
    entityId: string
    farmerId?: string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    action: string
    entityType: string
    entityId: string
    farmerId?: string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    farmerId?: NullableStringFieldUpdateOperationsInput | string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    farmerId?: NullableStringFieldUpdateOperationsInput | string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    action: string
    entityType: string
    entityId: string
    farmerId?: string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    farmerId?: NullableStringFieldUpdateOperationsInput | string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    farmerId?: NullableStringFieldUpdateOperationsInput | string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CollectionEventListRelationFilter = {
    every?: CollectionEventWhereInput
    some?: CollectionEventWhereInput
    none?: CollectionEventWhereInput
  }

  export type OtpRequestListRelationFilter = {
    every?: OtpRequestWhereInput
    some?: OtpRequestWhereInput
    none?: OtpRequestWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CollectionEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OtpRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FarmerCountOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    village?: SortOrder
    district?: SortOrder
    state?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FarmerMaxOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    village?: SortOrder
    district?: SortOrder
    state?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FarmerMinOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    village?: SortOrder
    district?: SortOrder
    state?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EnumEventStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusFilter<$PrismaModel> | $Enums.EventStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumEventSourceFilter<$PrismaModel = never> = {
    equals?: $Enums.EventSource | EnumEventSourceFieldRefInput<$PrismaModel>
    in?: $Enums.EventSource[] | ListEnumEventSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventSource[] | ListEnumEventSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumEventSourceFilter<$PrismaModel> | $Enums.EventSource
  }

  export type FarmerRelationFilter = {
    is?: FarmerWhereInput
    isNot?: FarmerWhereInput
  }

  export type CollectionEventCountOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    species?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    accuracy?: SortOrder
    altitude?: SortOrder
    timestamp?: SortOrder
    moisturePct?: SortOrder
    notes?: SortOrder
    photoHash?: SortOrder
    photoUrl?: SortOrder
    status?: SortOrder
    txId?: SortOrder
    blockHash?: SortOrder
    lastError?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    syncedAt?: SortOrder
    isValidLocation?: SortOrder
    isValidSeason?: SortOrder
    qualityScore?: SortOrder
    source?: SortOrder
    deviceInfo?: SortOrder
    appVersion?: SortOrder
  }

  export type CollectionEventAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    accuracy?: SortOrder
    altitude?: SortOrder
    moisturePct?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    qualityScore?: SortOrder
  }

  export type CollectionEventMaxOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    species?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    accuracy?: SortOrder
    altitude?: SortOrder
    timestamp?: SortOrder
    moisturePct?: SortOrder
    notes?: SortOrder
    photoHash?: SortOrder
    photoUrl?: SortOrder
    status?: SortOrder
    txId?: SortOrder
    blockHash?: SortOrder
    lastError?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    syncedAt?: SortOrder
    isValidLocation?: SortOrder
    isValidSeason?: SortOrder
    qualityScore?: SortOrder
    source?: SortOrder
    deviceInfo?: SortOrder
    appVersion?: SortOrder
  }

  export type CollectionEventMinOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    species?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    accuracy?: SortOrder
    altitude?: SortOrder
    timestamp?: SortOrder
    moisturePct?: SortOrder
    notes?: SortOrder
    photoHash?: SortOrder
    photoUrl?: SortOrder
    status?: SortOrder
    txId?: SortOrder
    blockHash?: SortOrder
    lastError?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    syncedAt?: SortOrder
    isValidLocation?: SortOrder
    isValidSeason?: SortOrder
    qualityScore?: SortOrder
    source?: SortOrder
    deviceInfo?: SortOrder
    appVersion?: SortOrder
  }

  export type CollectionEventSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    accuracy?: SortOrder
    altitude?: SortOrder
    moisturePct?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    qualityScore?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumEventStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusWithAggregatesFilter<$PrismaModel> | $Enums.EventStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventStatusFilter<$PrismaModel>
    _max?: NestedEnumEventStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumEventSourceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventSource | EnumEventSourceFieldRefInput<$PrismaModel>
    in?: $Enums.EventSource[] | ListEnumEventSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventSource[] | ListEnumEventSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumEventSourceWithAggregatesFilter<$PrismaModel> | $Enums.EventSource
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventSourceFilter<$PrismaModel>
    _max?: NestedEnumEventSourceFilter<$PrismaModel>
  }

  export type FarmerNullableRelationFilter = {
    is?: FarmerWhereInput | null
    isNot?: FarmerWhereInput | null
  }

  export type OtpRequestCountOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    phone?: SortOrder
    otp?: SortOrder
    isUsed?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    usedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type OtpRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    phone?: SortOrder
    otp?: SortOrder
    isUsed?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    usedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type OtpRequestMinOrderByAggregateInput = {
    id?: SortOrder
    farmerId?: SortOrder
    phone?: SortOrder
    otp?: SortOrder
    isUsed?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    usedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type EnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type SyncJobCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    status?: SortOrder
    attempts?: SortOrder
    maxAttempts?: SortOrder
    lastError?: SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SyncJobAvgOrderByAggregateInput = {
    attempts?: SortOrder
    maxAttempts?: SortOrder
  }

  export type SyncJobMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    status?: SortOrder
    attempts?: SortOrder
    maxAttempts?: SortOrder
    lastError?: SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SyncJobMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    status?: SortOrder
    attempts?: SortOrder
    maxAttempts?: SortOrder
    lastError?: SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SyncJobSumOrderByAggregateInput = {
    attempts?: SortOrder
    maxAttempts?: SortOrder
  }

  export type EnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    farmerId?: SortOrder
    changes?: SortOrder
    metadata?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    farmerId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    farmerId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type CollectionEventCreateNestedManyWithoutFarmerInput = {
    create?: XOR<CollectionEventCreateWithoutFarmerInput, CollectionEventUncheckedCreateWithoutFarmerInput> | CollectionEventCreateWithoutFarmerInput[] | CollectionEventUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: CollectionEventCreateOrConnectWithoutFarmerInput | CollectionEventCreateOrConnectWithoutFarmerInput[]
    createMany?: CollectionEventCreateManyFarmerInputEnvelope
    connect?: CollectionEventWhereUniqueInput | CollectionEventWhereUniqueInput[]
  }

  export type OtpRequestCreateNestedManyWithoutFarmerInput = {
    create?: XOR<OtpRequestCreateWithoutFarmerInput, OtpRequestUncheckedCreateWithoutFarmerInput> | OtpRequestCreateWithoutFarmerInput[] | OtpRequestUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: OtpRequestCreateOrConnectWithoutFarmerInput | OtpRequestCreateOrConnectWithoutFarmerInput[]
    createMany?: OtpRequestCreateManyFarmerInputEnvelope
    connect?: OtpRequestWhereUniqueInput | OtpRequestWhereUniqueInput[]
  }

  export type CollectionEventUncheckedCreateNestedManyWithoutFarmerInput = {
    create?: XOR<CollectionEventCreateWithoutFarmerInput, CollectionEventUncheckedCreateWithoutFarmerInput> | CollectionEventCreateWithoutFarmerInput[] | CollectionEventUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: CollectionEventCreateOrConnectWithoutFarmerInput | CollectionEventCreateOrConnectWithoutFarmerInput[]
    createMany?: CollectionEventCreateManyFarmerInputEnvelope
    connect?: CollectionEventWhereUniqueInput | CollectionEventWhereUniqueInput[]
  }

  export type OtpRequestUncheckedCreateNestedManyWithoutFarmerInput = {
    create?: XOR<OtpRequestCreateWithoutFarmerInput, OtpRequestUncheckedCreateWithoutFarmerInput> | OtpRequestCreateWithoutFarmerInput[] | OtpRequestUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: OtpRequestCreateOrConnectWithoutFarmerInput | OtpRequestCreateOrConnectWithoutFarmerInput[]
    createMany?: OtpRequestCreateManyFarmerInputEnvelope
    connect?: OtpRequestWhereUniqueInput | OtpRequestWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CollectionEventUpdateManyWithoutFarmerNestedInput = {
    create?: XOR<CollectionEventCreateWithoutFarmerInput, CollectionEventUncheckedCreateWithoutFarmerInput> | CollectionEventCreateWithoutFarmerInput[] | CollectionEventUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: CollectionEventCreateOrConnectWithoutFarmerInput | CollectionEventCreateOrConnectWithoutFarmerInput[]
    upsert?: CollectionEventUpsertWithWhereUniqueWithoutFarmerInput | CollectionEventUpsertWithWhereUniqueWithoutFarmerInput[]
    createMany?: CollectionEventCreateManyFarmerInputEnvelope
    set?: CollectionEventWhereUniqueInput | CollectionEventWhereUniqueInput[]
    disconnect?: CollectionEventWhereUniqueInput | CollectionEventWhereUniqueInput[]
    delete?: CollectionEventWhereUniqueInput | CollectionEventWhereUniqueInput[]
    connect?: CollectionEventWhereUniqueInput | CollectionEventWhereUniqueInput[]
    update?: CollectionEventUpdateWithWhereUniqueWithoutFarmerInput | CollectionEventUpdateWithWhereUniqueWithoutFarmerInput[]
    updateMany?: CollectionEventUpdateManyWithWhereWithoutFarmerInput | CollectionEventUpdateManyWithWhereWithoutFarmerInput[]
    deleteMany?: CollectionEventScalarWhereInput | CollectionEventScalarWhereInput[]
  }

  export type OtpRequestUpdateManyWithoutFarmerNestedInput = {
    create?: XOR<OtpRequestCreateWithoutFarmerInput, OtpRequestUncheckedCreateWithoutFarmerInput> | OtpRequestCreateWithoutFarmerInput[] | OtpRequestUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: OtpRequestCreateOrConnectWithoutFarmerInput | OtpRequestCreateOrConnectWithoutFarmerInput[]
    upsert?: OtpRequestUpsertWithWhereUniqueWithoutFarmerInput | OtpRequestUpsertWithWhereUniqueWithoutFarmerInput[]
    createMany?: OtpRequestCreateManyFarmerInputEnvelope
    set?: OtpRequestWhereUniqueInput | OtpRequestWhereUniqueInput[]
    disconnect?: OtpRequestWhereUniqueInput | OtpRequestWhereUniqueInput[]
    delete?: OtpRequestWhereUniqueInput | OtpRequestWhereUniqueInput[]
    connect?: OtpRequestWhereUniqueInput | OtpRequestWhereUniqueInput[]
    update?: OtpRequestUpdateWithWhereUniqueWithoutFarmerInput | OtpRequestUpdateWithWhereUniqueWithoutFarmerInput[]
    updateMany?: OtpRequestUpdateManyWithWhereWithoutFarmerInput | OtpRequestUpdateManyWithWhereWithoutFarmerInput[]
    deleteMany?: OtpRequestScalarWhereInput | OtpRequestScalarWhereInput[]
  }

  export type CollectionEventUncheckedUpdateManyWithoutFarmerNestedInput = {
    create?: XOR<CollectionEventCreateWithoutFarmerInput, CollectionEventUncheckedCreateWithoutFarmerInput> | CollectionEventCreateWithoutFarmerInput[] | CollectionEventUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: CollectionEventCreateOrConnectWithoutFarmerInput | CollectionEventCreateOrConnectWithoutFarmerInput[]
    upsert?: CollectionEventUpsertWithWhereUniqueWithoutFarmerInput | CollectionEventUpsertWithWhereUniqueWithoutFarmerInput[]
    createMany?: CollectionEventCreateManyFarmerInputEnvelope
    set?: CollectionEventWhereUniqueInput | CollectionEventWhereUniqueInput[]
    disconnect?: CollectionEventWhereUniqueInput | CollectionEventWhereUniqueInput[]
    delete?: CollectionEventWhereUniqueInput | CollectionEventWhereUniqueInput[]
    connect?: CollectionEventWhereUniqueInput | CollectionEventWhereUniqueInput[]
    update?: CollectionEventUpdateWithWhereUniqueWithoutFarmerInput | CollectionEventUpdateWithWhereUniqueWithoutFarmerInput[]
    updateMany?: CollectionEventUpdateManyWithWhereWithoutFarmerInput | CollectionEventUpdateManyWithWhereWithoutFarmerInput[]
    deleteMany?: CollectionEventScalarWhereInput | CollectionEventScalarWhereInput[]
  }

  export type OtpRequestUncheckedUpdateManyWithoutFarmerNestedInput = {
    create?: XOR<OtpRequestCreateWithoutFarmerInput, OtpRequestUncheckedCreateWithoutFarmerInput> | OtpRequestCreateWithoutFarmerInput[] | OtpRequestUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: OtpRequestCreateOrConnectWithoutFarmerInput | OtpRequestCreateOrConnectWithoutFarmerInput[]
    upsert?: OtpRequestUpsertWithWhereUniqueWithoutFarmerInput | OtpRequestUpsertWithWhereUniqueWithoutFarmerInput[]
    createMany?: OtpRequestCreateManyFarmerInputEnvelope
    set?: OtpRequestWhereUniqueInput | OtpRequestWhereUniqueInput[]
    disconnect?: OtpRequestWhereUniqueInput | OtpRequestWhereUniqueInput[]
    delete?: OtpRequestWhereUniqueInput | OtpRequestWhereUniqueInput[]
    connect?: OtpRequestWhereUniqueInput | OtpRequestWhereUniqueInput[]
    update?: OtpRequestUpdateWithWhereUniqueWithoutFarmerInput | OtpRequestUpdateWithWhereUniqueWithoutFarmerInput[]
    updateMany?: OtpRequestUpdateManyWithWhereWithoutFarmerInput | OtpRequestUpdateManyWithWhereWithoutFarmerInput[]
    deleteMany?: OtpRequestScalarWhereInput | OtpRequestScalarWhereInput[]
  }

  export type FarmerCreateNestedOneWithoutEventsInput = {
    create?: XOR<FarmerCreateWithoutEventsInput, FarmerUncheckedCreateWithoutEventsInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutEventsInput
    connect?: FarmerWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumEventStatusFieldUpdateOperationsInput = {
    set?: $Enums.EventStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumEventSourceFieldUpdateOperationsInput = {
    set?: $Enums.EventSource
  }

  export type FarmerUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<FarmerCreateWithoutEventsInput, FarmerUncheckedCreateWithoutEventsInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutEventsInput
    upsert?: FarmerUpsertWithoutEventsInput
    connect?: FarmerWhereUniqueInput
    update?: XOR<XOR<FarmerUpdateToOneWithWhereWithoutEventsInput, FarmerUpdateWithoutEventsInput>, FarmerUncheckedUpdateWithoutEventsInput>
  }

  export type FarmerCreateNestedOneWithoutOtpRequestsInput = {
    create?: XOR<FarmerCreateWithoutOtpRequestsInput, FarmerUncheckedCreateWithoutOtpRequestsInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutOtpRequestsInput
    connect?: FarmerWhereUniqueInput
  }

  export type FarmerUpdateOneWithoutOtpRequestsNestedInput = {
    create?: XOR<FarmerCreateWithoutOtpRequestsInput, FarmerUncheckedCreateWithoutOtpRequestsInput>
    connectOrCreate?: FarmerCreateOrConnectWithoutOtpRequestsInput
    upsert?: FarmerUpsertWithoutOtpRequestsInput
    disconnect?: FarmerWhereInput | boolean
    delete?: FarmerWhereInput | boolean
    connect?: FarmerWhereUniqueInput
    update?: XOR<XOR<FarmerUpdateToOneWithWhereWithoutOtpRequestsInput, FarmerUpdateWithoutOtpRequestsInput>, FarmerUncheckedUpdateWithoutOtpRequestsInput>
  }

  export type EnumJobStatusFieldUpdateOperationsInput = {
    set?: $Enums.JobStatus
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumEventStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusFilter<$PrismaModel> | $Enums.EventStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumEventSourceFilter<$PrismaModel = never> = {
    equals?: $Enums.EventSource | EnumEventSourceFieldRefInput<$PrismaModel>
    in?: $Enums.EventSource[] | ListEnumEventSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventSource[] | ListEnumEventSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumEventSourceFilter<$PrismaModel> | $Enums.EventSource
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumEventStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusWithAggregatesFilter<$PrismaModel> | $Enums.EventStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventStatusFilter<$PrismaModel>
    _max?: NestedEnumEventStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumEventSourceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventSource | EnumEventSourceFieldRefInput<$PrismaModel>
    in?: $Enums.EventSource[] | ListEnumEventSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventSource[] | ListEnumEventSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumEventSourceWithAggregatesFilter<$PrismaModel> | $Enums.EventSource
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventSourceFilter<$PrismaModel>
    _max?: NestedEnumEventSourceFilter<$PrismaModel>
  }

  export type NestedEnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type NestedEnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CollectionEventCreateWithoutFarmerInput = {
    id?: string
    species: string
    latitude: number
    longitude: number
    accuracy?: number | null
    altitude?: number | null
    timestamp: Date | string
    moisturePct?: number | null
    notes?: string | null
    photoHash?: string | null
    photoUrl?: string | null
    status?: $Enums.EventStatus
    txId?: string | null
    blockHash?: string | null
    lastError?: string | null
    retryCount?: number
    maxRetries?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    syncedAt?: Date | string | null
    isValidLocation?: boolean
    isValidSeason?: boolean
    qualityScore?: number | null
    source?: $Enums.EventSource
    deviceInfo?: string | null
    appVersion?: string | null
  }

  export type CollectionEventUncheckedCreateWithoutFarmerInput = {
    id?: string
    species: string
    latitude: number
    longitude: number
    accuracy?: number | null
    altitude?: number | null
    timestamp: Date | string
    moisturePct?: number | null
    notes?: string | null
    photoHash?: string | null
    photoUrl?: string | null
    status?: $Enums.EventStatus
    txId?: string | null
    blockHash?: string | null
    lastError?: string | null
    retryCount?: number
    maxRetries?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    syncedAt?: Date | string | null
    isValidLocation?: boolean
    isValidSeason?: boolean
    qualityScore?: number | null
    source?: $Enums.EventSource
    deviceInfo?: string | null
    appVersion?: string | null
  }

  export type CollectionEventCreateOrConnectWithoutFarmerInput = {
    where: CollectionEventWhereUniqueInput
    create: XOR<CollectionEventCreateWithoutFarmerInput, CollectionEventUncheckedCreateWithoutFarmerInput>
  }

  export type CollectionEventCreateManyFarmerInputEnvelope = {
    data: CollectionEventCreateManyFarmerInput | CollectionEventCreateManyFarmerInput[]
    skipDuplicates?: boolean
  }

  export type OtpRequestCreateWithoutFarmerInput = {
    id?: string
    phone: string
    otp: string
    isUsed?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    usedAt?: Date | string | null
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type OtpRequestUncheckedCreateWithoutFarmerInput = {
    id?: string
    phone: string
    otp: string
    isUsed?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    usedAt?: Date | string | null
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type OtpRequestCreateOrConnectWithoutFarmerInput = {
    where: OtpRequestWhereUniqueInput
    create: XOR<OtpRequestCreateWithoutFarmerInput, OtpRequestUncheckedCreateWithoutFarmerInput>
  }

  export type OtpRequestCreateManyFarmerInputEnvelope = {
    data: OtpRequestCreateManyFarmerInput | OtpRequestCreateManyFarmerInput[]
    skipDuplicates?: boolean
  }

  export type CollectionEventUpsertWithWhereUniqueWithoutFarmerInput = {
    where: CollectionEventWhereUniqueInput
    update: XOR<CollectionEventUpdateWithoutFarmerInput, CollectionEventUncheckedUpdateWithoutFarmerInput>
    create: XOR<CollectionEventCreateWithoutFarmerInput, CollectionEventUncheckedCreateWithoutFarmerInput>
  }

  export type CollectionEventUpdateWithWhereUniqueWithoutFarmerInput = {
    where: CollectionEventWhereUniqueInput
    data: XOR<CollectionEventUpdateWithoutFarmerInput, CollectionEventUncheckedUpdateWithoutFarmerInput>
  }

  export type CollectionEventUpdateManyWithWhereWithoutFarmerInput = {
    where: CollectionEventScalarWhereInput
    data: XOR<CollectionEventUpdateManyMutationInput, CollectionEventUncheckedUpdateManyWithoutFarmerInput>
  }

  export type CollectionEventScalarWhereInput = {
    AND?: CollectionEventScalarWhereInput | CollectionEventScalarWhereInput[]
    OR?: CollectionEventScalarWhereInput[]
    NOT?: CollectionEventScalarWhereInput | CollectionEventScalarWhereInput[]
    id?: StringFilter<"CollectionEvent"> | string
    farmerId?: StringFilter<"CollectionEvent"> | string
    species?: StringFilter<"CollectionEvent"> | string
    latitude?: FloatFilter<"CollectionEvent"> | number
    longitude?: FloatFilter<"CollectionEvent"> | number
    accuracy?: FloatNullableFilter<"CollectionEvent"> | number | null
    altitude?: FloatNullableFilter<"CollectionEvent"> | number | null
    timestamp?: DateTimeFilter<"CollectionEvent"> | Date | string
    moisturePct?: FloatNullableFilter<"CollectionEvent"> | number | null
    notes?: StringNullableFilter<"CollectionEvent"> | string | null
    photoHash?: StringNullableFilter<"CollectionEvent"> | string | null
    photoUrl?: StringNullableFilter<"CollectionEvent"> | string | null
    status?: EnumEventStatusFilter<"CollectionEvent"> | $Enums.EventStatus
    txId?: StringNullableFilter<"CollectionEvent"> | string | null
    blockHash?: StringNullableFilter<"CollectionEvent"> | string | null
    lastError?: StringNullableFilter<"CollectionEvent"> | string | null
    retryCount?: IntFilter<"CollectionEvent"> | number
    maxRetries?: IntFilter<"CollectionEvent"> | number
    createdAt?: DateTimeFilter<"CollectionEvent"> | Date | string
    updatedAt?: DateTimeFilter<"CollectionEvent"> | Date | string
    syncedAt?: DateTimeNullableFilter<"CollectionEvent"> | Date | string | null
    isValidLocation?: BoolFilter<"CollectionEvent"> | boolean
    isValidSeason?: BoolFilter<"CollectionEvent"> | boolean
    qualityScore?: FloatNullableFilter<"CollectionEvent"> | number | null
    source?: EnumEventSourceFilter<"CollectionEvent"> | $Enums.EventSource
    deviceInfo?: StringNullableFilter<"CollectionEvent"> | string | null
    appVersion?: StringNullableFilter<"CollectionEvent"> | string | null
  }

  export type OtpRequestUpsertWithWhereUniqueWithoutFarmerInput = {
    where: OtpRequestWhereUniqueInput
    update: XOR<OtpRequestUpdateWithoutFarmerInput, OtpRequestUncheckedUpdateWithoutFarmerInput>
    create: XOR<OtpRequestCreateWithoutFarmerInput, OtpRequestUncheckedCreateWithoutFarmerInput>
  }

  export type OtpRequestUpdateWithWhereUniqueWithoutFarmerInput = {
    where: OtpRequestWhereUniqueInput
    data: XOR<OtpRequestUpdateWithoutFarmerInput, OtpRequestUncheckedUpdateWithoutFarmerInput>
  }

  export type OtpRequestUpdateManyWithWhereWithoutFarmerInput = {
    where: OtpRequestScalarWhereInput
    data: XOR<OtpRequestUpdateManyMutationInput, OtpRequestUncheckedUpdateManyWithoutFarmerInput>
  }

  export type OtpRequestScalarWhereInput = {
    AND?: OtpRequestScalarWhereInput | OtpRequestScalarWhereInput[]
    OR?: OtpRequestScalarWhereInput[]
    NOT?: OtpRequestScalarWhereInput | OtpRequestScalarWhereInput[]
    id?: StringFilter<"OtpRequest"> | string
    farmerId?: StringNullableFilter<"OtpRequest"> | string | null
    phone?: StringFilter<"OtpRequest"> | string
    otp?: StringFilter<"OtpRequest"> | string
    isUsed?: BoolFilter<"OtpRequest"> | boolean
    expiresAt?: DateTimeFilter<"OtpRequest"> | Date | string
    createdAt?: DateTimeFilter<"OtpRequest"> | Date | string
    usedAt?: DateTimeNullableFilter<"OtpRequest"> | Date | string | null
    ipAddress?: StringNullableFilter<"OtpRequest"> | string | null
    userAgent?: StringNullableFilter<"OtpRequest"> | string | null
  }

  export type FarmerCreateWithoutEventsInput = {
    id?: string
    phone: string
    name?: string | null
    village?: string | null
    district?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    otpRequests?: OtpRequestCreateNestedManyWithoutFarmerInput
  }

  export type FarmerUncheckedCreateWithoutEventsInput = {
    id?: string
    phone: string
    name?: string | null
    village?: string | null
    district?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    otpRequests?: OtpRequestUncheckedCreateNestedManyWithoutFarmerInput
  }

  export type FarmerCreateOrConnectWithoutEventsInput = {
    where: FarmerWhereUniqueInput
    create: XOR<FarmerCreateWithoutEventsInput, FarmerUncheckedCreateWithoutEventsInput>
  }

  export type FarmerUpsertWithoutEventsInput = {
    update: XOR<FarmerUpdateWithoutEventsInput, FarmerUncheckedUpdateWithoutEventsInput>
    create: XOR<FarmerCreateWithoutEventsInput, FarmerUncheckedCreateWithoutEventsInput>
    where?: FarmerWhereInput
  }

  export type FarmerUpdateToOneWithWhereWithoutEventsInput = {
    where?: FarmerWhereInput
    data: XOR<FarmerUpdateWithoutEventsInput, FarmerUncheckedUpdateWithoutEventsInput>
  }

  export type FarmerUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    village?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otpRequests?: OtpRequestUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    village?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otpRequests?: OtpRequestUncheckedUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerCreateWithoutOtpRequestsInput = {
    id?: string
    phone: string
    name?: string | null
    village?: string | null
    district?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: CollectionEventCreateNestedManyWithoutFarmerInput
  }

  export type FarmerUncheckedCreateWithoutOtpRequestsInput = {
    id?: string
    phone: string
    name?: string | null
    village?: string | null
    district?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: CollectionEventUncheckedCreateNestedManyWithoutFarmerInput
  }

  export type FarmerCreateOrConnectWithoutOtpRequestsInput = {
    where: FarmerWhereUniqueInput
    create: XOR<FarmerCreateWithoutOtpRequestsInput, FarmerUncheckedCreateWithoutOtpRequestsInput>
  }

  export type FarmerUpsertWithoutOtpRequestsInput = {
    update: XOR<FarmerUpdateWithoutOtpRequestsInput, FarmerUncheckedUpdateWithoutOtpRequestsInput>
    create: XOR<FarmerCreateWithoutOtpRequestsInput, FarmerUncheckedCreateWithoutOtpRequestsInput>
    where?: FarmerWhereInput
  }

  export type FarmerUpdateToOneWithWhereWithoutOtpRequestsInput = {
    where?: FarmerWhereInput
    data: XOR<FarmerUpdateWithoutOtpRequestsInput, FarmerUncheckedUpdateWithoutOtpRequestsInput>
  }

  export type FarmerUpdateWithoutOtpRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    village?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: CollectionEventUpdateManyWithoutFarmerNestedInput
  }

  export type FarmerUncheckedUpdateWithoutOtpRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    village?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: CollectionEventUncheckedUpdateManyWithoutFarmerNestedInput
  }

  export type CollectionEventCreateManyFarmerInput = {
    id?: string
    species: string
    latitude: number
    longitude: number
    accuracy?: number | null
    altitude?: number | null
    timestamp: Date | string
    moisturePct?: number | null
    notes?: string | null
    photoHash?: string | null
    photoUrl?: string | null
    status?: $Enums.EventStatus
    txId?: string | null
    blockHash?: string | null
    lastError?: string | null
    retryCount?: number
    maxRetries?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    syncedAt?: Date | string | null
    isValidLocation?: boolean
    isValidSeason?: boolean
    qualityScore?: number | null
    source?: $Enums.EventSource
    deviceInfo?: string | null
    appVersion?: string | null
  }

  export type OtpRequestCreateManyFarmerInput = {
    id?: string
    phone: string
    otp: string
    isUsed?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    usedAt?: Date | string | null
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type CollectionEventUpdateWithoutFarmerInput = {
    id?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    altitude?: NullableFloatFieldUpdateOperationsInput | number | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    moisturePct?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    photoHash?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    txId?: NullableStringFieldUpdateOperationsInput | string | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isValidLocation?: BoolFieldUpdateOperationsInput | boolean
    isValidSeason?: BoolFieldUpdateOperationsInput | boolean
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    source?: EnumEventSourceFieldUpdateOperationsInput | $Enums.EventSource
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    appVersion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CollectionEventUncheckedUpdateWithoutFarmerInput = {
    id?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    altitude?: NullableFloatFieldUpdateOperationsInput | number | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    moisturePct?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    photoHash?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    txId?: NullableStringFieldUpdateOperationsInput | string | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isValidLocation?: BoolFieldUpdateOperationsInput | boolean
    isValidSeason?: BoolFieldUpdateOperationsInput | boolean
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    source?: EnumEventSourceFieldUpdateOperationsInput | $Enums.EventSource
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    appVersion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CollectionEventUncheckedUpdateManyWithoutFarmerInput = {
    id?: StringFieldUpdateOperationsInput | string
    species?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    accuracy?: NullableFloatFieldUpdateOperationsInput | number | null
    altitude?: NullableFloatFieldUpdateOperationsInput | number | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    moisturePct?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    photoHash?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    txId?: NullableStringFieldUpdateOperationsInput | string | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isValidLocation?: BoolFieldUpdateOperationsInput | boolean
    isValidSeason?: BoolFieldUpdateOperationsInput | boolean
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    source?: EnumEventSourceFieldUpdateOperationsInput | $Enums.EventSource
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    appVersion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OtpRequestUpdateWithoutFarmerInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OtpRequestUncheckedUpdateWithoutFarmerInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OtpRequestUncheckedUpdateManyWithoutFarmerInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use FarmerCountOutputTypeDefaultArgs instead
     */
    export type FarmerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FarmerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FarmerDefaultArgs instead
     */
    export type FarmerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FarmerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollectionEventDefaultArgs instead
     */
    export type CollectionEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollectionEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OtpRequestDefaultArgs instead
     */
    export type OtpRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OtpRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SyncJobDefaultArgs instead
     */
    export type SyncJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SyncJobDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}